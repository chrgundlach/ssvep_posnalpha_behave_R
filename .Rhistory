)) +
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"),
aes(color=cue_validity_label)) +
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("alpha-band amplitude contra nontarget", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
# alpha contra target
dat_plot <- DATA.In_longer %>%
dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, amplitude, signal, pos_rel_target, time)%>%
filter(post_hit=="hit", signal == "SSVEP", pos_rel_target == "contra_target", time == "[500 1500]ms")
mu <- dat_plot %>%
group_by(subject, cue_validity_label)%>%
summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
ungroup()%>%
group_by(cue_validity_label)%>%
summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))
theme_set(theme_bw())
plot1 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label, fill_ramp = after_stat(abs(x)),
color_ramp = after_stat(-dnorm(x, 0, 0.5))
)) +
stat_slab(
height = 2, color = "gray15",
expand = TRUE, trim = TRUE,
fill_type = "segments",
show.legend = FALSE,
position = position_dodgejust(0.3),
)+
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
xlim(pl.xlim)
plot2 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label
)) +
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"),
aes(color=cue_validity_label)) +
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("SSVEP amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
pl.xlim = c(-4, 4)
# alpha contra target
dat_plot <- DATA.In_longer %>%
dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_target", time == "[500 1500]ms")%>%
dplyr::rename(amplitude = Zamplitude)
mu <- dat_plot %>%
group_by(subject, cue_validity_label)%>%
summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
ungroup()%>%
group_by(cue_validity_label)%>%
summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))
theme_set(theme_bw())
plot1 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label, fill_ramp = after_stat(abs(x))
)) +
stat_slab(
height = 2, color = "gray15",
expand = TRUE, trim = TRUE,
fill_type = "segments",
show.legend = FALSE,
position = position_dodgejust(0.3),
)+
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
xlim(pl.xlim)
plot2 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label
)) +
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"),
aes(color=cue_validity_label)) +
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_alpha-band amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
# alpha contra nontarget
dat_plot <- DATA.In_longer %>%
dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_nontarget", time == "[500 1500]ms")%>%
dplyr::rename(amplitude = Zamplitude)
mu <- dat_plot %>%
group_by(subject, cue_validity_label)%>%
summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
ungroup()%>%
group_by(cue_validity_label)%>%
summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))
theme_set(theme_bw())
plot1 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label, fill_ramp = after_stat(abs(x))
)) +
stat_slab(
height = 2, color = "gray15",
expand = TRUE, trim = TRUE,
fill_type = "segments",
show.legend = FALSE,
position = position_dodgejust(0.3),
)+
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
xlim(pl.xlim)
plot2 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label
)) +
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"),
aes(color=cue_validity_label)) +
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_alpha-band amplitude contra nontarget", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
# alpha contra target
dat_plot <- DATA.In_longer %>%
dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
filter(post_hit=="hit", signal == "SSVEP", pos_rel_target == "contra_target", time == "[500 1500]ms")%>%
dplyr::rename(amplitude = Zamplitude)
mu <- dat_plot %>%
group_by(subject, cue_validity_label)%>%
summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
ungroup()%>%
group_by(cue_validity_label)%>%
summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))
theme_set(theme_bw())
plot1 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label, fill_ramp = after_stat(abs(x))
)) +
stat_slab(
height = 2, color = "gray15",
expand = TRUE, trim = TRUE,
fill_type = "segments",
show.legend = FALSE,
position = position_dodgejust(0.3),
)+
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
xlim(pl.xlim)
plot2 <-
ggplot(dat_plot, aes(
x = amplitude,
fill = cue_validity_label
)) +
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"),
aes(color=cue_validity_label)) +
theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_SSVEP amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
? brm
getOption("mc.cores", 1)
getOption("mc.cores", 2)
getOption("mc.cores")
modeldata2 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_vis_alpha_contra_target = Zamplitude)
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change",
cores = 4
# file_refit = "always"
)  # Save all that hard work.
installed.packages("RTools")
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change",
cores = 4
# file_refit = "always"
)  # Save all that hard work.
install.packages("rstan", type = "source")
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
# setwd(wd) # set work directory
# Load relevant libraries:
library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)
library(cowplot)
library(dplyr)
library(readr)
library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)
library(broom)
library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
library(broom.mixed)
library(ggdist)
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/R_rainclouds.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/summarySE.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/simulateData.R')
datafile1 <- "data_in/Behavior_FFT_singletrials_cue.txt"
timewindows = c("[-1000 0]ms", "[0 1000]ms", "[500 1500]ms")
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
DATA.In_long <- DATA.In_long %>%
mutate(post_hit = case_when(
post_hit == "1" ~ "hit",
post_hit == "NaN" ~ "miss",
post_hit == "0" ~ "error"
))
DATA.In_longer <- DATA.In_long %>%
pivot_longer(
cols = SSVEP_leftStim_win1:visualAlpha_rightStim_win3,
names_to = c("signal","side","time"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "amplitude"
) %>%
mutate(pos_rel_target = as.factor(ifelse(
post_event_pos_label == "left" & (side == "leftHand" | side == "leftStim"), "contra_target", ifelse(
post_event_pos_label == "right" & (side == "leftHand" | side == "leftStim"), "contra_nontarget", ifelse(
post_event_pos_label == "left" & (side == "rightHand" | side == "rightStim"), "contra_nontarget", "contra_target"
)
))
))%>%
mutate(attention = case_when(
pos_rel_target == "contra_target" & cue_validity_label == "valid" ~ "cued",
pos_rel_target == "contra_target" & cue_validity_label == "invalid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "valid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "invalid" ~ "cued",
cue_validity_label == "neutral" ~ "neutral"
))%>%
mutate(attention = factor(attention, levels=c('uncued','neutral','cued'), ordered = T))%>%
mutate(time=case_when(
time == "win1" ~ timewindows[1],
time == "win2" ~ timewindows[2],
time == "win3" ~ timewindows[3]
)) %>%
# attempt to zscore data
group_by(subject, signal, side, time)%>%
mutate("Zamplitude" = scale(amplitude))%>%
ungroup
# mapvalues(DATA.In_longer$time, from=c("win1", "win2","win3"), to=timewindows)
# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_vis_alpha_contra_target = Zamplitude)
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
remove.packages()
remove.packages("rstan")
remove.packages("brms")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14 = g++",
file = M, sep = "\n", append = TRUE)
install.packages("StanHeaders")
install.packages("rstan", type = "source")
install.packages("brms")
system.file("include", "src", "stan", "model", "model_header.hpp",
package = "StanHeaders")
example(stan_model, package = "rstan", run.dontrun = TRUE)
rstan::stan_version()
writeLines(readLines(file.path(Sys.getenv("HOME"), ".R/Makevars")))
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
# setwd(wd) # set work directory
# Load relevant libraries:
library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)
library(cowplot)
library(dplyr)
library(readr)
library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)
library(broom)
library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
library(broom.mixed)
library(ggdist)
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/R_rainclouds.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/summarySE.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/simulateData.R')
datafile1 <- "data_in/Behavior_FFT_singletrials_cue.txt"
timewindows = c("[-1000 0]ms", "[0 1000]ms", "[500 1500]ms")
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
DATA.In_long <- DATA.In_long %>%
mutate(post_hit = case_when(
post_hit == "1" ~ "hit",
post_hit == "NaN" ~ "miss",
post_hit == "0" ~ "error"
))
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
DATA.In_long <- DATA.In_long %>%
mutate(post_hit = case_when(
post_hit == "1" ~ "hit",
post_hit == "NaN" ~ "miss",
post_hit == "0" ~ "error"
))
# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_vis_alpha_contra_target = Zamplitude)
DATA.In_longer <- DATA.In_long %>%
pivot_longer(
cols = SSVEP_leftStim_win1:visualAlpha_rightStim_win3,
names_to = c("signal","side","time"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "amplitude"
) %>%
mutate(pos_rel_target = as.factor(ifelse(
post_event_pos_label == "left" & (side == "leftHand" | side == "leftStim"), "contra_target", ifelse(
post_event_pos_label == "right" & (side == "leftHand" | side == "leftStim"), "contra_nontarget", ifelse(
post_event_pos_label == "left" & (side == "rightHand" | side == "rightStim"), "contra_nontarget", "contra_target"
)
))
))%>%
mutate(attention = case_when(
pos_rel_target == "contra_target" & cue_validity_label == "valid" ~ "cued",
pos_rel_target == "contra_target" & cue_validity_label == "invalid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "valid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "invalid" ~ "cued",
cue_validity_label == "neutral" ~ "neutral"
))%>%
mutate(attention = factor(attention, levels=c('uncued','neutral','cued'), ordered = T))%>%
mutate(time=case_when(
time == "win1" ~ timewindows[1],
time == "win2" ~ timewindows[2],
time == "win3" ~ timewindows[3]
)) %>%
# attempt to zscore data
group_by(subject, signal, side, time)%>%
mutate("Zamplitude" = scale(amplitude))%>%
ungroup
modeldata = DATA.In_long %>%
filter(post_hit == "hit")
# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_vis_alpha_contra_target = Zamplitude)
# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
example(stan_model, package = "rstan", run.dontrun = TRUE)
devtools::session_info("rstan")
installed.packages("devtoolsa")
installed.packages("devtools")
installed.packages("devtools", type = "source")
R CMD config CXX14STD
# visual alpha contra target + validity
fit_z_validity_visalpha = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_z_validity_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change",
cores = 4
# file_refit = "always"
)  # Save all that hard work.
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("PKI", type="source")
