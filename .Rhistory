setwd(wd) # set work directory
# Load relevant libraries:
library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)
library(cowplot)
library(dplyr)
library(readr)
library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)
library(broom)
library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
remove.packages("sjstats", lib="~/R/win-library/4.1")
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
setwd(wd) # set work directory
# Load relevant libraries:
library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)
library(cowplot)
library(dplyr)
library(readr)
library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)
library(broom)
library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
install.packages("modelr")
install.packages("modelr")
library(modelr)
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
setwd(wd) # set work directory
# Load relevant libraries:
library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)
library(cowplot)
library(dplyr)
library(readr)
library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)
library(broom)
library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
library(ggdist)
source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/R_rainclouds.R')
source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/summarySE.R')
source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/simulateData.R')
datafile1 <- "data_in/Behavior_FFT_singletrials_cue.txt"
timewindows = c("[-1000 0]ms", "[0 1000]ms", "[500 1500]ms")
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
DATA.In_long <- DATA.In_long %>%
mutate(post_hit = case_when(
post_hit == "1" ~ "hit",
post_hit == "NaN" ~ "miss",
post_hit == "0" ~ "error"
))
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
DATA.In_long <- DATA.In_long %>%
mutate(post_hit = case_when(
post_hit == "1" ~ "hit",
post_hit == "NaN" ~ "miss",
post_hit == "0" ~ "error"
))
DATA.In_longer <- DATA.In_long %>%
pivot_longer(
cols = SSVEP_leftStim_win1:visualAlpha_rightStim_win3,
names_to = c("signal","side","time"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "amplitude"
) %>%
mutate(pos_rel_target = as.factor(ifelse(
post_event_pos_label == "left" & (side == "leftHand" | side == "leftStim"), "contra_target", ifelse(
post_event_pos_label == "right" & (side == "leftHand" | side == "leftStim"), "contra_nontarget", ifelse(
post_event_pos_label == "left" & (side == "rightHand" | side == "rightStim"), "contra_nontarget", "contra_target"
)
))
))%>%
mutate(attention = case_when(
pos_rel_target == "contra_target" & cue_validity_label == "valid" ~ "cued",
pos_rel_target == "contra_target" & cue_validity_label == "invalid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "valid" ~ "uncued",
pos_rel_target == "contra_nontarget" & cue_validity_label == "invalid" ~ "cued",
cue_validity_label == "neutral" ~ "neutral"
))%>%
mutate(attention = factor(attention, levels=c('uncued','neutral','cued'), ordered = T))%>%
mutate(time=case_when(
time == "win1" ~ timewindows[1],
time == "win2" ~ timewindows[2],
time == "win3" ~ timewindows[3]
))
# mapvalues(DATA.In_longer$time, from=c("win1", "win2","win3"), to=timewindows)
#define priors: [needs rechecking!]
priors = c(
set_prior('normal(6.397, 5.29832)', class = 'Intercept'),  # around exp(6) = 600ms
set_prior('normal(5.29832,5.29832)', class = 'sigma'),  # SD of individual rts in log-units exp 5.298 = 200
set_prior('normal(0,  5.01064)', class = 'b'),  # around 150 ms in each direction
set_prior('normal(6.21461, 6.21461)', class = 'sd')  # some variability between participants
)
modeldata = DATA.In_long %>%
filter(post_hit == "hit")
# intercept model
fit_intercept = brm(formula = post_RT ~ 1 + (1|subject),
data = modeldata,
family = shifted_lognormal(),
file = 'fit_intercept_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# validity model
fit_validity = brm(formula = post_RT ~ cue_validity_label + (cue_validity_label|subject),
data = modeldata,
family = shifted_lognormal(),
file = 'fit_validity_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# # validity model with specified priors
# fit_validity_pr = brm(formula = post_RT ~ cue_validity_label + (1|subject),
#           data = modeldata,
#           family = shifted_lognormal(),
#           file = 'fit_validity_withpriors_slog',
#           save_pars = save_pars(all = TRUE),
#           file_refit = "on_change",
#           prior=priors
#           # file_refit = "always"
#           )  # Save all that hard work.
# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_vis_alpha_contra_target = amplitude)
# visual alpha contra target
fit_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra target + validity
fit_validity_visalpha = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_validity_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra target * validity
fit_validity_x_visalpha = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
data = modeldata2,
family = shifted_lognormal(),
file = 'fit_validity_x_visalpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# alter data to extract post-cue alpha contra to nontarget
modeldata3 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_nontarget")%>%
mutate(post_cue_vis_alpha_contra_nontarget = amplitude)
# visual alpha contra nontarget
fit_alpha2 = brm(formula = post_RT ~ post_cue_vis_alpha_contra_nontarget + (1|subject),
data = modeldata3,
family = shifted_lognormal(),
file = 'fit_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra nontarget + validity
fit_validity_alpha2 = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
data = modeldata3,
family = shifted_lognormal(),
file = 'fit_validity_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra nontarget + validity
fit_validity_x_alpha2 = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
data = modeldata3,
family = shifted_lognormal(),
file = 'fit_validity_x_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# combined alpha model
# alter data to extract post-cue alpha contra to target
modeldata4 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)
# visual alpha contra target and contra non-target
fit_alpha1_alpha2 = brm(formula = post_RT ~ contra_target + contra_nontarget + (1|subject),
data = modeldata4,
family = shifted_lognormal(),
file = 'fit_visalpha1_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra target and contra non-target + validity
fit_validity_alpha1_alpha2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
data = modeldata4,
family = shifted_lognormal(),
file = 'fit_validity_visalpha1_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra target and contra non-target + validity
fit_validity_x_alpha1_alpha2 = brm(
formula = post_RT ~ cue_validity_label * contra_target + cue_validity_label * contra_nontarget + (cue_validity_label|subject),
data = modeldata4,
family = shifted_lognormal(),
file = 'fit_validity_x_visalpha1_visalpha2_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# # visual alpha contra target and contra non-target + validity with random factor validity
# fit_validity_alpha1_alpha2_v2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
#           data = modeldata4,
#           family = shifted_lognormal(),
#           file = 'fit_validity_visalpha1_visalpha2_v2_slog',
#           save_pars = save_pars(all = TRUE),
#           file_refit = "on_change"
#           # file_refit = "always"
#           )  # Save all that hard work.
# alter data to extract post-cue target SSVEP
modeldata5 = DATA.In_longer %>%
filter(post_hit == "hit", signal == "SSVEP", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
mutate(post_cue_SSVEP_contra_target = amplitude)
# SSVEP model
fit_SSVEP = brm(formula = post_RT ~ post_cue_SSVEP_contra_target + (1|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_ssvep_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# SSVEP + validity model
fit_validity_SSVEP = brm(formula = post_RT ~ cue_validity_label + post_cue_SSVEP_contra_target + (cue_validity_label|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_validity_ssvep_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
fit_validity_x_SSVEP = brm(formula = post_RT ~ cue_validity_label * post_cue_SSVEP_contra_target + (cue_validity_label|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_validity_x_ssvep_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# combined alpha + SSVEP model (most complex)
# alter data to extract post-cue alpha contra to target
modeldata5 = DATA.In_longer %>%
filter(post_hit == "hit", signal != "motorAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, signal, pos_rel_target, amplitude) %>%
pivot_wider(names_from = c("signal", "pos_rel_target"), values_from = amplitude)
# visual alpha contra target and contra non-target and SSVEP
fit_SSVEP_alpha = brm(formula = post_RT ~ visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (1|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_SSVEP_alpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# visual alpha contra target and contra non-target and SSVEP  + validity
fit_validity_SSVEP_alpha = brm(formula = post_RT ~ cue_validity_label + visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (cue_validity_label|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_validity_SSVEP_alpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
fit_validity_x_SSVEP_alpha = brm(
formula = post_RT ~ cue_validity_label * visualAlpha_contra_target + cue_validity_label * visualAlpha_contra_nontarget + cue_validity_label * SSVEP_contra_target + (cue_validity_label|subject),
data = modeldata5,
family = shifted_lognormal(),
file = 'fit_validity_x_SSVEP_alpha_slog',
save_pars = save_pars(all = TRUE),
file_refit = "on_change"
# file_refit = "always"
)  # Save all that hard work.
# add relevant criteria for model comparison
# compare models
fit_intercept <- add_criterion(fit_intercept, c("loo", "waic", "bayes_R2"))
fit_validity <- add_criterion(fit_validity, c("loo", "waic", "bayes_R2"))
# fit_validity_pr <- add_criterion(fit_validity_pr, c("loo", "waic", "bayes_R2"))
# fit_validity_v2 <- add_criterion(fit_validity_v2, c("loo", "waic", "bayes_R2"))
fit_visalpha <- add_criterion(fit_visalpha, c("loo", "waic", "bayes_R2"))
fit_validity_visalpha <- add_criterion(fit_validity_visalpha, c("loo", "waic", "bayes_R2"))
fit_validity_x_visalpha <- add_criterion(fit_validity_x_visalpha, c("loo", "waic", "bayes_R2"))
fit_alpha2 <- add_criterion(fit_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_alpha2 <- add_criterion(fit_validity_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_x_alpha2 <- add_criterion(fit_validity_x_alpha2, c("loo", "waic", "bayes_R2"))
fit_alpha1_alpha2 <- add_criterion(fit_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_alpha1_alpha2 <- add_criterion(fit_validity_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_x_alpha1_alpha2 <- add_criterion(fit_validity_x_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_SSVEP <- add_criterion(fit_SSVEP, c("loo", "waic", "bayes_R2"))
fit_validity_SSVEP <- add_criterion(fit_validity_SSVEP, c("loo", "waic", "bayes_R2"))
fit_validity_x_SSVEP <- add_criterion(fit_validity_x_SSVEP, c("loo", "waic", "bayes_R2"))
fit_SSVEP_alpha <- add_criterion(fit_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_validity_SSVEP_alpha <- add_criterion(fit_validity_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_validity_x_SSVEP_alpha <- add_criterion(fit_validity_x_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2) %>%
head(10)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2) %>%
head()
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label)
DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)%>%
data_grid(cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2)
modeldata4 %>%
data_grid(cue_validity_label)
modeldata4 %>%
data_grid(cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2)
? data_grid
modeldata4
modeldata4 %>%
data_grid(subject, cue_validity_label)
modeldata4
modeldata4 %>%
data_grid(subject, cue_validity_label, post_RT, contra_nontarget, contra_target) %>%
add_epred_draws(fit_validity_alpha1_alpha2)
modeldata4 %>%
data_grid(subject, cue_validity_label, post_RT, contra_nontarget, contra_target)
modeldata4 %>%
data_grid(subject, cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2) %>%
head()
modeldata4 %>%
data_grid(subject, cue_validity_label) %>%
add_epred_draws(fit_validity_alpha1_alpha2)
modeldata4 %>%
data_grid(subject, cue_validity_label, contra_target, contra_nontarget) %>%
add_epred_draws(fit_validity_alpha1_alpha2) %>%
head()
modeldata4 %>%
data_grid(subject, cue_validity_label, contra_target, contra_nontarget)
mcmc_dens_overlay(post_fit, pars = c("b_cue_validity_labelneutral")) +
theme(panel.grid = element_blank())
# it seems as the model with visual alpha contra to the target and contra to the non target is superior?
summary(fit_validity_alpha1_alpha2)
plot(fit_validity_alpha1_alpha2, ask = FALSE)
plot(conditional_effects(fit_validity_alpha1_alpha2), ask = FALSE)
plot(conditional_effects(fit_validity_alpha1_alpha2, spaghetti=TRUE, ndraws = 100, points = TRUE), ask = FALSE)
# extract the posterior draws
post_fit <- posterior_samples(fit_validity_alpha1_alpha2, , add_chain = T)
# plot the intercept for chains
mcmc_dens_overlay(post_fit, pars = c("b_Intercept")) +
theme(panel.grid = element_blank())
mcmc_dens_overlay(post_fit, pars = c("b_cue_validity_labelneutral")) +
theme(panel.grid = element_blank())
# rhat
brms::rhat(fit_validity_alpha1_alpha2)["b_Intercept"]
pp_check(fit_validity_alpha1_alpha2)
pp_check(fit_validity_alpha1_alpha2, type = "error_hist", ndraws=11)
pp_check(fit_validity_alpha1_alpha2, type = "scatter_avg", ndraws=100)
pp_check(fit_validity_alpha1_alpha2, type = "stat_2d")
pp_check(fit_validity_alpha1_alpha2, type = "loo_pit")
posterior_summary(fit_validity_alpha1_alpha2)
tidy(fit_validity_alpha1_alpha2, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
tidybayes(fit_validity_alpha1_alpha2, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
modeldata4 <-DATA.In_longer %>%
filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
pivot_wider(names_from = "pos_rel_target", values_from = amplitude)
tidy_samples(fit_validity_alpha1_alpha2, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
?? brms_tidied
?? brms_tidier
library(broom.mixed)
broom.mixed::tidy(fit_validity_alpha1_alpha2, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.80)
broom.mixed::tidy(fit_validity_alpha1_alpha2, effects = c("fixed"),
conf.int = TRUE, conf.level = 0.80)
brms_tidiers(fit_validity_alpha1_alpha2, effects = c("fixed"),
conf.int = TRUE, conf.level = 0.80)
library(broom.mixed)
library(broom.mixed)
update.packages(broom.mixed)
update.packages("broom.mixed")
