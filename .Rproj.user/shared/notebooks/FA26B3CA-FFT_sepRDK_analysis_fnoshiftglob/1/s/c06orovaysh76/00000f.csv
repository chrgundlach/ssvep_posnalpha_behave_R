"0",""
"0","dat2plot <- Data_Collapsed"
"0",""
"0","#evoked baseline corrected for attended color#"
"0","dat2plot2 <- Data_Collapsed%>%"
"0","  filter(time==""post"")%>%"
"0","  pivot_longer(c(-subjects, -con_RDK_col_attended, -con_RDK_pos_attended, -time ),names_to = ""signal"", values_to = ""amplitude"")%>%"
"0","  group_by(subjects, con_RDK_col_attended, con_RDK_pos_attended, time, signal)%>%"
"0","  summarise(amplitude = mean(amplitude))%>%"
"0","  pivot_wider(names_from = ""signal"", values_from = ""amplitude"")%>%"
"0","  mutate(con_RDK_col_attended=as.factor(con_RDK_col_attended),con_RDK_pos_attended=as.factor(con_RDK_pos_attended))%>%"
"0","  ungroup()%>%"
"0","  dplyr::select(-time, -amplitude_evoked, -amplitude_induced, -modulation_induced)%>%"
"0","  pivot_wider(names_from = ""con_RDK_col_attended"", values_from = ""modulation_evoked"")%>%"
"0","  mutate(""att_MINUS_unatt"" = col_attended - col_unattended)"
"2","`summarise()` has grouped output by 'subjects', 'con_RDK_col_attended', 'con_RDK_pos_attended', 'time'. You can override using the `.groups` argument.
"
"0","# for attended color  "
"0","### for saving with alpha = 1"
"0",""
"0","# set limits"
"0","yax_limits <- c( min(dat2plot2$att_MINUS_unatt), max(dat2plot2$att_MINUS_unatt))"
"0","# yax_limits <- round(yax_limits + c(-1, 1)*diff(yax_limits)*0.1)"
"0","yax_limits <- yax_limits + c(-1, 1)*diff(yax_limits)*0.2"
"0",""
"0","theme_set(theme_bw())"
"0","plot1 <- ggplot(dat2plot2, aes(x = con_RDK_pos_attended, y = att_MINUS_unatt, fill = con_RDK_pos_attended)) +"
"0","  geom_hline(yintercept=0, show.legend = FALSE) +"
"0","  geom_line(aes(group = subjects),colour = ""grey60"",alpha = 1,size =1) +"
"0","  geom_beeswarm(aes(color = con_RDK_pos_attended, x = con_RDK_pos_attended,"
"0","                    group = con_RDK_pos_attended), cex=2.5, size = 3,alpha=1,fill=""grey40"",shape=21, dodge.width = 1)+"
"0","  # geom_point(aes(color = condition, x = interaction(time,condition),"
"0","  #                   group = condition), size = 4,alpha=0.4)+"
"0","  stat_summary(fun.y=mean, aes(ymin=..y.., ymax=..y.., color =con_RDK_pos_attended), geom='errorbar', width=0.9, size=1.5) +"
"0","  # scale_x_discrete(""condition"", breaks=waiver(), labels = rep(c(""""),1,4)) +"
"0","  scale_x_discrete(""position"", breaks=waiver(), labels = c(""attended"",""unattended"")) +"
"0","  # theme(legend.position=""bottom"") +"
"0","  ylab(expression(paste(""amplitude modulation in %"")))+"
"0","    # scale_fill_manual(values=c(""#193A3D"", ""#F03F3F""))+"
"0","    # scale_color_manual(values=c(""#193A3D"", ""#F03F3F""))+"
"0","    scale_fill_manual(values=c(rgb2hex(179, 0.00, 204.00), rgb2hex(89, 0.00, 202)))+"
"0","    scale_color_manual(values=c(rgb2hex(179, 0.00, 204.00), rgb2hex(89, 0.00, 202)))+"
"0","    theme(legend.position=""none"")+"
"0","  # scale_y_continuous(limits=c(-60, 140))"
"0","  scale_y_continuous(limits=yax_limits)"
"0",""
"0",""
"0","plot2 <- ggplot(dat2plot2, aes(y = att_MINUS_unatt, fill = con_RDK_pos_attended, x = 1)) +"
"0","  geom_flat_violin(aes(fill = con_RDK_pos_attended), position = position_nudge(x = .1, y = 0), "
"0","                   adjust = 1.3, trim = FALSE, alpha = 1, colour = NA)+"
"0","  # geom_hline(yintercept=0, show.legend = FALSE) +"
"0","  scale_fill_manual(values=c(rgb2hex(179, 0.00, 204.00), rgb2hex(89, 0.00, 202)))+"
"0","  scale_color_manual(values=c(rgb2hex(179, 0.00, 204.00), rgb2hex(89, 0.00, 202)))+"
"0","  theme(axis.title.y=element_blank(),"
"0","        axis.text.y=element_blank(),"
"0","        axis.ticks.y=element_blank())+"
"0","  theme(axis.title.x=element_blank(),"
"0","        axis.text.x=element_blank(),"
"0","        axis.ticks.x=element_blank())+"
"0","  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+"
"0","  scale_y_continuous(limits=yax_limits)"
"0","  # scale_y_continuous()"
"0",""
"0",""
"0",""
"0",""
"0","# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = ""AUTO"")"
"0","plotttitle <- ggdraw() + draw_label(""SSVEP Color attended - unattended | by position"", fontface='bold')"
"0","plotplots <- ggarrange(plot1, plot2,ncol = 2,common.legend = TRUE,align = ""h"", widths=c(3,1))"
"0",""
"0","savefig <- multi_panel_figure(columns = 1, rows = 1, panel_label_type = ""none"", width = 3, height = 4, unit = ""in"")"
"0","saveplot <- ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.2, 1))"
"0",""
"0","savefig %<>%"
"0","  fill_panel(saveplot, column = 1, row = 1)"
"0","savefig"
