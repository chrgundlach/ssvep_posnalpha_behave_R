---
title: "Behavioral Analysis Posner+SSVEP paradigm"
author: '[Christopher Gundlach](https://www.researchgate.net/profile/Christopher_Gundlach)'
date: '`r Sys.Date()`'
output:
  html_document:
    code_folding: hide
    toc: true
    toc_float: true
    toc_depth: 4
    theme: flatly
---
# Initialisierung  
**Setting up R libraries**

```{r set up libraries,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
# setwd(wd) # set work directory

# Load relevant libraries:



library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
# library(sjPlot)
library(viridis)
library(multcomp)

library(cowplot)
library(dplyr)
library(readr)

library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)

library(broom)

library(brms)
library(tidybayes)
library(bayesplot)
library(modelr)
library(broom.mixed)
library(magrittr)
library(rstan)
library(posterior)

library(ggdist)

# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/R_rainclouds.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/summarySE.R')
# source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/simulateData.R')

datafile1 <- "data_in/Behavior_FFT_singletrials_cue.txt"
timewindows = c("[-1000 0]ms", "[0 1000]ms", "[500 1500]ms")

```
<style type="text/css">
.main-container {
  max-width: 1800px !important;
  margin-left: auto;
  margin-right: auto;
}
</style>

# Analysis of electrophysiological data (Posner Paradigma)  
<br>  

## subaveraged Daten werden geladen
Loading data `r toString(datafile1)`

The data has the following structure

* trialnumber = trial
* blocknumber
* trial_timing_type = 1=regular; 2=control
* cue_validity = 1=valid, 2=invalid, 3=neutral
* cue_validity_label
* cue_direction = 1=left, 2=right
* cue_direction_label
* cue_onset_fr = frame number of cue presentation
* cue_onset_t_est = onset time in ms
* cue_onset_t_meas = nan
* pre_event_type = 1=shorter, 2=longer, NaN=no event
* pre_event_onset_fr = onset frame of event
* pre_event_onset_t_est = onset time in ms
* pre_event_onset_t_meas = nan
* post_event_pos = position of post event: 1 = left, 2=right
* post_event_pos_label
* post_event_direction = direction of target (-90:90)=top; 
* post_event_direction_c = category of target position: 1=top; 2=bottom
* post_event_direction_c_l = label
* post_event_dimenstion = size in degrees
* post_event_onset_fr = onset frames of event
* post_event_onset_t_est = onset times of events
* post_event_onset_t_meas = nan
* triggernum = trigger number
* pre_hit = empty=no event, TRUE=hit, 0=error, NaN=miss
* pre_RT = RT in ms
* post_hit = TRUE=hit, 0=error, NaN=miss
* post_RT = RT in ms
* subject
* FFT measures ...



```{r load data,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)

DATA.In_long <- DATA.In_long %>%
  mutate(post_hit = case_when(
    post_hit == "1" ~ "hit",
    post_hit == "NaN" ~ "miss",
    post_hit == "0" ~ "error"
  ))
```

# Manipulation of data
long into wide format


```{r edit data,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
DATA.In_longer <- DATA.In_long %>%
  pivot_longer(
    cols = SSVEP_leftStim_win1:visualAlpha_rightStim_win3,
    names_to = c("signal","side","time"),
    names_pattern = "(.*)_(.*)_(.*)",
    values_to = "amplitude"
  ) %>%
  mutate(pos_rel_target = as.factor(ifelse(
    post_event_pos_label == "left" & (side == "leftHand" | side == "leftStim"), "contra_target", ifelse(
      post_event_pos_label == "right" & (side == "leftHand" | side == "leftStim"), "contra_nontarget", ifelse(
        post_event_pos_label == "left" & (side == "rightHand" | side == "rightStim"), "contra_nontarget", "contra_target"
      )
    ))
  ))%>%
  mutate(attention = case_when(
    pos_rel_target == "contra_target" & cue_validity_label == "valid" ~ "cued",
    pos_rel_target == "contra_target" & cue_validity_label == "invalid" ~ "uncued",
    pos_rel_target == "contra_nontarget" & cue_validity_label == "valid" ~ "uncued",
    pos_rel_target == "contra_nontarget" & cue_validity_label == "invalid" ~ "cued",
    cue_validity_label == "neutral" ~ "neutral"
  ))%>%
  mutate(attention = factor(attention, levels=c('uncued','neutral','cued'), ordered = T))%>%
  mutate(time=case_when(
      time == "win1" ~ timewindows[1],
      time == "win2" ~ timewindows[2],
      time == "win3" ~ timewindows[3]
  )) %>%
  # attempt to zscore data
  group_by(subject, signal, side, time)%>%
  mutate("Zamplitude" = scale(amplitude))%>%
  ungroup
 

  # mapvalues(DATA.In_longer$time, from=c("win1", "win2","win3"), to=timewindows)

```

# Illustration of Data  
<br> 

## Plots
<br> 
1a  Illustrate Data as is

* pooled across left and right side and only hits

<br>  

```{r plot_data_st, results = "hide",  fig.height=3, fig.width=9, warning = FALSE}
# str(DATA.In_longer)
dat_plot <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()
  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("SSVEP | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("visual alpha | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                     y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("motor alpha | rel. to cue")



```

<br> 

1b  Illustrate Data as is

* plot modulation pooled across left and right side and only hits

<br>  

```{r plot_data_st2, results = "hide",  fig.height=3, fig.width=5, warning = FALSE}
# str(DATA.In_longer)
dat_plot <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post")
  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
  ylab('modulation in %')+
  ggtitle("SSVEP | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
   ylab('modulation in %')+
  ggtitle("visual alpha | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
  ylab('modulation in %')+
  ggtitle("motor alpha | rel. to cue")



```

<br> 
1a  Illustrate Data as is

* pooled across left and right side and only hits

<br>  

```{r plot_data_st3, results = "hide",  fig.height=3, fig.width=5, warning = FALSE}
# str(DATA.In_longer)
dat_plot <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()
  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("SSVEP | attent. focus")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("visual alpha | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("motor alpha | attent. focus")


```
<br> 

1b  Illustrate Data as is

* plot modulation pooled across left and right side and only hits

<br>  

```{r plot_data_st4, results = "hide",  fig.height=3, fig.width=3, warning = FALSE}
# str(DATA.In_longer)
dat_plot <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post")

dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('modulation in %')+
  ggtitle("SSVEP | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('modulation in %')+
  ggtitle("visual alpha | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('modulation in %')+
  ggtitle("motor alpha | attent. focus")
```

<br> 

### illustrate reaction time distributions

<br>  

```{r plot_data_RTdistr, results = "hide",  fig.height=3.5, fig.width=5, warning = FALSE}

dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, post_RT)%>%
  filter(post_hit=="hit")%>%
  group_by(subject, trialnumber,cue_validity_label)%>%
  summarise(post_RT=mean(post_RT))

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(RT = mean(post_RT,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(RT,na.rm = TRUE), grp.median = median(RT,na.rm = TRUE))


theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = post_RT, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x)), 
    color_ramp = after_stat(-dnorm(x, 0, 2))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(c(200, 1200))

plot2 <-
  ggplot(dat_plot, aes(
    x = post_RT, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name="RT in ms", breaks=c(200,400,600,800,1000,1200), labels=waiver(), limits=c(200,1200))+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("RT in ms", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
```

<br> 

### illustrate alpha SSVEP distribution

<br>  

```{r plot_data_alphaSSVEPdistr, results = "hide",  fig.height=3.5, fig.width=5, warning = FALSE}
pl.xlim = c(0, 25)

# alpha contra target
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, amplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_target", time == "[500 1500]ms")

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x)), 
    color_ramp = after_stat(-dnorm(x, 0, 0.5))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("alpha-band amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))

# alpha contra nontarget
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, amplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_nontarget", time == "[500 1500]ms")

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x)), 
    color_ramp = after_stat(-dnorm(x, 0, 0.5))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("alpha-band amplitude contra nontarget", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))


# alpha contra target
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, amplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "SSVEP", pos_rel_target == "contra_target", time == "[500 1500]ms")

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x)), 
    color_ramp = after_stat(-dnorm(x, 0, 0.5))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("SSVEP amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
```

<br> 

### illustrate alpha SSVEP z-scored distributions

<br>  

```{r plot_data_Z_alphaSSVEPdistr, results = "hide",  fig.height=3.5, fig.width=5, warning = FALSE}
pl.xlim = c(-4, 4)

# alpha contra target
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_target", time == "[500 1500]ms")%>%
  dplyr::rename(amplitude = Zamplitude)

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_alpha-band amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))

# alpha contra nontarget
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "visualAlpha", pos_rel_target == "contra_nontarget", time == "[500 1500]ms")%>%
  dplyr::rename(amplitude = Zamplitude)

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_alpha-band amplitude contra nontarget", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))


# alpha contra target
dat_plot <- DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, Zamplitude, signal, pos_rel_target, time)%>%
  filter(post_hit=="hit", signal == "SSVEP", pos_rel_target == "contra_target", time == "[500 1500]ms")%>%
  dplyr::rename(amplitude = Zamplitude)

mu <- dat_plot %>%
  group_by(subject, cue_validity_label)%>%
  summarize(amplitude = mean(amplitude,na.rm = TRUE))%>%
  ungroup()%>%
  group_by(cue_validity_label)%>%
  summarize(grp.mean = mean(amplitude,na.rm = TRUE), grp.median = median(amplitude,na.rm = TRUE))

theme_set(theme_bw())
plot1 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(pl.xlim)

plot2 <-
  ggplot(dat_plot, aes(
    x = amplitude, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name= expression(paste("amplitude in ", mu,"V")), breaks=waiver(), labels=waiver(), limits=pl.xlim)+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
  


# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("z_SSVEP amplitude contra target", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))
```


## decriptive data
<br>  

### behavioral measures

validity x target_position

```{r R_valXside, echo=FALSE}
DATA.In_longer %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, post_hit, post_RT)%>%
  filter(post_hit=="hit")%>%
  group_by(subject, trialnumber,cue_validity_label)%>%
  summarise(post_RT=mean(post_RT))%>%
  group_by(cue_validity_label)%>%
  summarize(Mean_RT = mean(post_RT), Median_RT = median(post_RT), SD_RT = SD(post_RT))%>%
  ungroup()%>%
  mutate(cue_validity_label = factor(cue_validity_label, levels=c('invalid','neutral','valid'), ordered = T))%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), caption = c("descriptives for response times in ms")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
  
  
```

<br>  

### electrophysiological measures

validity x target_position

```{r R_valXside, echo=FALSE}
DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post") %>%
  group_by(signal, cue_validity_label, pos_rel_target)%>%
  dplyr::summarise(M = mean(amplitude), SD = sd(amplitude))%>%
  ungroup()%>%
  mutate(cue_validity_label = factor(cue_validity_label, levels=c('invalid','neutral','valid'), ordered = T))%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), caption = c("average response measures")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post") %>%
  group_by(signal, attention)%>%
  dplyr::summarise(M = mean(amplitude), SD = sd(amplitude))%>%
  ungroup()%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), caption = c("average response measures")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
 


```





## tests  
<br>  

test of general model

### ANOVA electrophysiological measures
<br>  

ANOVA_RM for electrophysiological measures: meas ~ ATTENTION(cued, neutral, uncued)

```{r ANOVA_RT_ValXSei, message=FALSE, warning=FALSE, include=TRUE}
#ANOVAe
DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post")%>%
  group_by(signal)%>%
  nest() %>%
  mutate(stats= purrr::map(data, ~broom::tidy(
    anova(aov_ez(id="subject", dv = "amplitude", data = ., within = "attention"))
  ))) %>%
  dplyr::select(-data) %>%
  unnest()%>%
  mutate(
    `p.value` = cell_spec(ifelse(round(`p.value`,4)<.001,"< .001",round(`p.value`,4)), 
                        color = ifelse(is.nan(`p.value`),"blue", ifelse(`p.value` < .05, "green", "red")),
                        bold = ifelse(is.nan(`p.value`),F, ifelse(`p.value` < .05, T,F)),
                        align = "center")
  ) %>%
  dplyr::select(signal, term, `num.Df`, `den.Df`, MSE, `statistic`, ges, `p.value`) %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("repeated measures ANOVA ")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))



```

### Post-hoc t-Tests electrophysiological measures (cued vs neutral vs uncued)  
<br>


```{r post-hoc t_tests RT, echo=FALSE}
dat2model <-DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post")

# models
anovamodel_SSVEP <- dat2model %>%
  filter(signal == "SSVEP") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)
anovamodel_visalpha <- dat2model %>%
  filter(signal == "visualAlpha") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)
anovamodel_motalpha <- dat2model %>%
  filter(signal == "motorAlpha") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)

# posthocs
post_hocs.SSVEP <- emmeans(anovamodel_SSVEP$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm
post_hocs.visalpha <- emmeans(anovamodel_visalpha$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm
post_hocs.motalpha <- emmeans(anovamodel_motalpha$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm

# output
post_hocs.SSVEP$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = SSVEP")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.SSVEP$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = SSVEP | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


post_hocs.visalpha$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = visual alpha")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.visalpha$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = visual alpha | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

post_hocs.motalpha$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = motor alpha")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.motalpha$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = motor alpha | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


```


## Additional models
<br>

### linear mixed models SSVEP
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **SSVEP ~ Validity * Position + ( 1 | subjects)**


```{r linear mixed model SSVEP 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post", signal == "SSVEP")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("SSVEP | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model SSVEP 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  # geom_text(nudge_x = c(0, -0),
  #           nudge_y = c(26.7,  26.7),
  #           color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  # geom_text(nudge_x = c(0, -0),
  #           nudge_y = c(26.7,  26.7),
  #           color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  # geom_text(nudge_x = c(0.22, -0.22, 0.22, -0.22),
  #           nudge_y = c(26.7,  26.7,26.7,  26.7),
  #           color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models visual alpha
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **visual alpha ~ Validity * Position + ( 1 | subjects)**


```{r linear mixed model visual alpha 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post", signal == "visualAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("visual Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model visual alpha 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") + 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models motor alpha
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **motor alpha ~ Validity * position + ( 1 | subjects)**


```{r linear mixed model motor alpha 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  filter(time == "pre_to_post", signal == "motorAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("motor Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model motor alpha 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models SSVEP II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **SSVEP ~ Validity * position + ( 1 | subjects)**


```{r linear mixed model SSVEP 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  filter(time == "pre_to_post", signal == "SSVEP")



lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("SSVEP | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")



```

2.  model description of best model
    + Best model is **`r toString(best_model@call)`**
<br>

``` {r linear mixed model SSVEP 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model
model2test = lmer_model_fit

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
 geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))



```

### linear mixed models visual alpha II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **visual alpha ~ Validity * Stimulus + ( 1 | subjects)**


```{r linear mixed model visual alpha 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
 filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  filter(time == "pre_to_post", signal == "visualAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("visual Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```
2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model visual alpha 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models motor alpha II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **motor alpha ~ Validity * Stimulus + ( 1 | subjects)**


```{r linear mixed model motor alpha 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_longer %>%
 filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[500 1500]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[500 1500]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  filter(time == "pre_to_post", signal == "motorAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("motor Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```
2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model motor alpha 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(+0.22), color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text( color   = "black") +
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```




## Specific RT models | BRMS
<br>

based on example
https://lindeloev.shinyapps.io/shiny-rt/#4_applied_code_example

it seems to work much better when modelling random effects


### **estimating models**
<br>


intercept model                       **RT ~ 1 + ( 1 | subjects)**
validity model                        **RT ~ Cue + ( cue | subjects)**

*visual alpha models*
contra target                         **RT ~ visual_alpha_Targ + ( 1 | subjects)**
contra target + validity              **RT ~ Cue +  visual_alpha_Targ + ( cue | subjects)**
contra nontarget                      **RT ~ visual_alpha_NonTarg + ( 1 | subjects)**
contra nontarget + validity           **RT ~ Cue +  visual_alpha_NonTarg + ( cue | subjects)**

*ssvep models*
target ssvep                          **RT ~ SSVEP + ( 1 | subjects)**
target ssvep + validity               **RT ~ Cue + SSVEP + ( cue | subjects)**

*combined alpha models*
contra target + contra nontarget             **RT ~ visual_alpha_Targ + visual_alpha_NonTarg + ( 1 | subjects)**
contra target + contra nontarget + validity  **RT ~ Cue + visual_alpha_Targ + visual_alpha_NonTarg + ( cue | subjects)**

*combined total model*
alpha contra target + alpha contra nontarget + target SSVEP + validity **RT ~ Cue + visual_alpha_Targ + visual_alpha_NonTarg + SSVEP +( cue | subjects)**


all models were additionally modelled with interaction terms of cue * signal


``` {r brms model for RTs 01 eval, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
#define priors: [needs rechecking!]
# prior_summary(fit_visalpha) to show priors
priors = c(
  set_prior('normal(6.397, 5.29832)', class = 'Intercept'),  # around exp(6) = 600ms
  set_prior('normal(5.29832,5.29832)', class = 'sigma'),  # SD of individual rts in log-units exp 5.298 = 200
  set_prior('normal(0,  5.01064)', class = 'b'),  # around 150 ms in each direction of effect
  set_prior('normal(6.21461, 6.21461)', class = 'sd')  # some variability between participants
)

modeldata = DATA.In_long %>%
  filter(post_hit == "hit")

# intercept model
fit_intercept = brm(formula = post_RT ~ 1 + (1|subject),
          data = modeldata, 
          family = shifted_lognormal(),
          file = 'fit_intercept_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.


# validity model
fit_validity = brm(formula = post_RT ~ cue_validity_label + (cue_validity_label|subject),
          data = modeldata, 
          family = shifted_lognormal(),
          file = 'fit_validity_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.



# # validity model with specified priors
# fit_validity_pr = brm(formula = post_RT ~ cue_validity_label + (1|subject),
#           data = modeldata, 
#           family = shifted_lognormal(),
#           file = 'fit_validity_withpriors_slog',
#           save_pars = save_pars(all = TRUE),
#           file_refit = "on_change",
#           prior=priors
#           # file_refit = "always"
#           )  # Save all that hard work.

# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
  mutate(post_cue_vis_alpha_contra_target = amplitude)

# visual alpha contra target
fit_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target + validity
fit_validity_visalpha = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_validity_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target * validity
fit_validity_x_visalpha = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_validity_x_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# alter data to extract post-cue alpha contra to nontarget
modeldata3 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_nontarget")%>%
  mutate(post_cue_vis_alpha_contra_nontarget = amplitude)

# visual alpha contra nontarget 
fit_alpha2 = brm(formula = post_RT ~ post_cue_vis_alpha_contra_nontarget + (1|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"# file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra nontarget + validity
fit_validity_alpha2 = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_validity_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra nontarget + validity
fit_validity_x_alpha2 = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_validity_x_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# combined alpha model
# alter data to extract post-cue alpha contra to target
modeldata4 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, amplitude) %>%
  pivot_wider(names_from = "pos_rel_target", values_from = amplitude)

# visual alpha contra target and contra non-target
fit_alpha1_alpha2 = brm(formula = post_RT ~ contra_target + contra_nontarget + (1|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target + validity
fit_validity_alpha1_alpha2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_validity_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target + validity
fit_validity_x_alpha1_alpha2 = brm(
  formula = post_RT ~ cue_validity_label * contra_target + cue_validity_label * contra_nontarget + (cue_validity_label|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_validity_x_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# # visual alpha contra target and contra non-target + validity with random factor validity
# fit_validity_alpha1_alpha2_v2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
#           data = modeldata4, 
#           family = shifted_lognormal(),
#           file = 'fit_validity_visalpha1_visalpha2_v2_slog',
#           save_pars = save_pars(all = TRUE),
#           file_refit = "on_change"
#           # file_refit = "always"
#           )  # Save all that hard work.


# alter data to extract post-cue target SSVEP
modeldata5 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "SSVEP", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
  mutate(post_cue_SSVEP_contra_target = amplitude)

# SSVEP model
fit_SSVEP = brm(formula = post_RT ~ post_cue_SSVEP_contra_target + (1|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# SSVEP + validity model
fit_validity_SSVEP = brm(formula = post_RT ~ cue_validity_label + post_cue_SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_validity_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

fit_validity_x_SSVEP = brm(formula = post_RT ~ cue_validity_label * post_cue_SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_validity_x_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.



# combined alpha + SSVEP model (most complex)
# alter data to extract post-cue alpha contra to target
modeldata5 = DATA.In_longer %>%
  filter(post_hit == "hit", signal != "motorAlpha", time == "[500 1500]ms")%>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_RT, signal, pos_rel_target, amplitude) %>%
  pivot_wider(names_from = c("signal", "pos_rel_target"), values_from = amplitude)

# visual alpha contra target and contra non-target and SSVEP
fit_SSVEP_alpha = brm(formula = post_RT ~ visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (1|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target and SSVEP  + validity
fit_validity_SSVEP_alpha = brm(formula = post_RT ~ cue_validity_label + visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_validity_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.

fit_validity_x_SSVEP_alpha = brm(
  formula = post_RT ~ cue_validity_label * visualAlpha_contra_target + cue_validity_label * visualAlpha_contra_nontarget + cue_validity_label * SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_validity_x_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change"
          # file_refit = "always"
          )  # Save all that hard work.



```

### **estimating models zscored data**
<br>

as above but with alpha and SSVEP signals z-scored for each subject prior to model evaluation

``` {r brms model for RTs 02 eval, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}


# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
  mutate(post_cue_vis_alpha_contra_target = Zamplitude)

# visual alpha contra target
fit_z_visalpha = brm(formula = post_RT ~ post_cue_vis_alpha_contra_target + (1|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_z_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target + validity
fit_z_validity_visalpha = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target * validity
fit_z_validity_x_visalpha = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_target + (cue_validity_label|subject),
          data = modeldata2, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_x_visalpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# alter data to extract post-cue alpha contra to nontarget
modeldata3 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_nontarget")%>%
  mutate(post_cue_vis_alpha_contra_nontarget = Zamplitude)

# visual alpha contra nontarget 
fit_z_alpha2 = brm(formula = post_RT ~ post_cue_vis_alpha_contra_nontarget + (1|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_z_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra nontarget + validity
fit_z_validity_alpha2 = brm(formula = post_RT ~ cue_validity_label + post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra nontarget + validity
fit_z_validity_x_alpha2 = brm(formula = post_RT ~ cue_validity_label * post_cue_vis_alpha_contra_nontarget + (cue_validity_label|subject),
          data = modeldata3, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_x_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# combined alpha model
# alter data to extract post-cue alpha contra to target
modeldata4 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms")%>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_RT, pos_rel_target, Zamplitude) %>%
  pivot_wider(names_from = "pos_rel_target", values_from = Zamplitude)

# visual alpha contra target and contra non-target
fit_z_alpha1_alpha2 = brm(formula = post_RT ~ contra_target + contra_nontarget + (1|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_z_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target + validity
fit_z_validity_alpha1_alpha2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target + validity
fit_z_validity_x_alpha1_alpha2 = brm(
  formula = post_RT ~ cue_validity_label * contra_target + cue_validity_label * contra_nontarget + (cue_validity_label|subject),
          data = modeldata4, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_x_visalpha1_visalpha2_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# # visual alpha contra target and contra non-target + validity with random factor validity
# fit_validity_alpha1_alpha2_v2 = brm(formula = post_RT ~ cue_validity_label + contra_target + contra_nontarget + (cue_validity_label|subject),
#           data = modeldata4, 
#           family = shifted_lognormal(),
#           file = 'fit_validity_visalpha1_visalpha2_v2_slog',
#           save_pars = save_pars(all = TRUE),
#           file_refit = "on_change"
#           # file_refit = "always"
#           )  # Save all that hard work.


# alter data to extract post-cue target SSVEP
modeldata5 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "SSVEP", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
  mutate(post_cue_SSVEP_contra_target = Zamplitude)

# SSVEP model
fit_z_SSVEP = brm(formula = post_RT ~ post_cue_SSVEP_contra_target + (1|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# SSVEP + validity model
fit_z_validity_SSVEP = brm(formula = post_RT ~ cue_validity_label + post_cue_SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

fit_z_validity_x_SSVEP = brm(formula = post_RT ~ cue_validity_label * post_cue_SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_x_ssvep_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.



# combined alpha + SSVEP model (most complex)
# alter data to extract post-cue alpha contra to target
modeldata5 = DATA.In_longer %>%
  filter(post_hit == "hit", signal != "motorAlpha", time == "[500 1500]ms")%>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_RT, signal, pos_rel_target, Zamplitude) %>%
  pivot_wider(names_from = c("signal", "pos_rel_target"), values_from = Zamplitude)

# visual alpha contra target and contra non-target and SSVEP
fit_z_SSVEP_alpha = brm(formula = post_RT ~ visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (1|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

# visual alpha contra target and contra non-target and SSVEP  + validity
fit_z_validity_SSVEP_alpha = brm(formula = post_RT ~ cue_validity_label + visualAlpha_contra_target + visualAlpha_contra_nontarget + SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.

fit_z_validity_x_SSVEP_alpha = brm(
  formula = post_RT ~ cue_validity_label * visualAlpha_contra_target + cue_validity_label * visualAlpha_contra_nontarget + cue_validity_label * SSVEP_contra_target + (cue_validity_label|subject),
          data = modeldata5, 
          family = shifted_lognormal(),
          file = 'fit_z_validity_x_SSVEP_alpha_slog',
          save_pars = save_pars(all = TRUE),
          file_refit = "on_change",
          cores = 4
          # file_refit = "always"
          )  # Save all that hard work.



```


### **estimating models with manual priors before**
<br>

as above but with alpha and SSVEP signals z-scored for each subject prior to model evaluation

``` {r brms model for RTs 03 eval, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
#define priors: [needs rechecking!]
# prior_summary(fit_visalpha) to show priors
# some thoughts here https://discourse.mc-stan.org/t/weakly-informative-priors-for-shifted-lognormal/16206
# and here https://lindeloev.shinyapps.io/shiny-rt/#43_priors_and_descriptives
priors = c(
  set_prior('normal(6.397, 6.397)', class = 'Intercept'),  # around exp(6) = 600ms
  set_prior('normal(5.70378,5.70378)', class = 'sigma'),  # SD of individual rts in log-units exp 5.70378 = 300
  set_prior('normal(0,  5.70378)', class = 'b'),  # around 150 ms in each direction of effect exp 5.70378 = 300
  set_prior('normal(6.21461, 6.21461)', class = 'sd')  # some variability between participants
  # set_prior('normal(1.7, 1.7)', class = 'ndt') # some variability in the shift 238.399 ms exp(exp(1.7))
)

priors = c(
  set_prior('normal(6.397, 3)', class = 'Intercept'),  # around exp(6) = 600ms
  set_prior('normal(5.29832,3)', class = 'sigma'),  # SD of individual rts in log-units exp 5.298 = 200
  set_prior('normal(0,  5.01064)', class = 'b'),  # around 150 ms in each direction of effect
  set_prior('normal(6.21461, 3)', class = 'sd')  # some variability between participants
)

# informed by plot(fit_validity, ask = FALSE) [only ones that really work]
priors = c(
  set_prior('normal(6.2, 0.5)', class = 'Intercept'),  # around exp(6) = 600ms
  set_prior('normal(0.26, 0.5)', class = 'sigma'),  # SD of individual rts in log-units exp 5.298 = 200
  set_prior('normal(0,  0.5)', class = 'b'),  # around 150 ms in each direction of effect
  set_prior('normal(0.1, 0.5)', class = 'sd'),  # some variability between participants
  set_prior('normal(150, 50)', class = 'ndt')  # some variability between participants
)

# alter data to extract post-cue alpha contra to target
modeldata2 = DATA.In_longer %>%
  filter(post_hit == "hit", signal == "visualAlpha", time == "[500 1500]ms", pos_rel_target == "contra_target")%>%
  mutate(post_cue_vis_alpha_contra_target = amplitude)

# validity model for checking priors
testfit_validity_drawpriorsOnly = brm(
  formula = post_RT ~ cue_validity_label  + (cue_validity_label|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_drawpriorsOnly_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  sample_prior = "only",
  prior = priors
  # file_refit = "always"
)  # Save all that hard work.

# grapically check priors
pp_check(testfit_validity_drawpriorsOnly)+
  coord_cartesian(xlim = c(-1, 1000))

# now do real models
# intercept model without priors
testfit_intecept_noPRIORs = brm(
  formula = post_RT ~ 1 + (1|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_intecept_noPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# intercept model with priors
testfit_intecept_withPRIORs = brm(
  formula = post_RT ~ 1 + (1|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_intecept_withPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  prior = priors,
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# validity model without priors
testfit_validity_noPRIORs = brm(
  formula = post_RT ~ cue_validity_label + (cue_validity_label|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_noPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# validity model with priors
testfit_validity_withPRIORs = brm(
  formula = post_RT ~ cue_validity_label + (cue_validity_label|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_withPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  prior = priors,
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.


# validity model for checking priors
testfit_validity_drawpriorsOnly = brm(
  formula = post_RT ~ cue_validity_label  + (cue_validity_label|subject),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_drawpriorsOnly_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  sample_prior = "only",
  prior = priors
  # file_refit = "always"
)  # Save all that hard work.

# grapically check priors
pp_check(testfit_validity_drawpriorsOnly)+
  coord_cartesian(xlim = c(-1, 1000))

# now do real models with ndt shift
# intercept model without priors
testfit_intecept_ndt_noPRIORs = brm(
  formula = bf(post_RT ~ 1 + (1|subject), ndt ~ 1 + (1|subject)),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_intecept_ndt_noPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# intercept model with priors
testfit_intecept_ndt_withPRIORs = brm(
  formula = bf(post_RT ~ 1 + (1|subject), ndt ~ 1 + (1|subject)),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_intecept_ndt_withPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  prior = priors,
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# validity model without priors
testfit_validity_ndt_noPRIORs = brm(
  formula = bf(post_RT ~ cue_validity_label + (cue_validity_label|subject), ndt ~ 1 + (1|subject)),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_ndt_noPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.

# validity model with priors
testfit_validity_ndt_withPRIORs = brm(
  formula = bf(post_RT ~ cue_validity_label + (cue_validity_label|subject), ndt ~ 1 + (1|subject)),
  data = modeldata2, 
  family = shifted_lognormal(),
  file = 'testfit_validity_ndt_withPRIORs_slog',
  save_pars = save_pars(all = TRUE),
  file_refit = "on_change",
  prior = priors,
  cores = 4
  # file_refit = "always"
)  # Save all that hard work.



```


### adding information criteria for all model estimates
<br>

required for model comparison

``` {r brms model add ICs, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
# add relevant criteria for model comparison
# compare models
fit_intercept <- add_criterion(fit_intercept, c("loo", "waic", "bayes_R2"))
fit_validity <- add_criterion(fit_validity, c("loo", "waic", "bayes_R2"))
# fit_validity_pr <- add_criterion(fit_validity_pr, c("loo", "waic", "bayes_R2"))
# fit_validity_v2 <- add_criterion(fit_validity_v2, c("loo", "waic", "bayes_R2"))
fit_visalpha <- add_criterion(fit_visalpha, c("loo", "waic", "bayes_R2"))
fit_validity_visalpha <- add_criterion(fit_validity_visalpha, c("loo", "waic", "bayes_R2"))
fit_validity_x_visalpha <- add_criterion(fit_validity_x_visalpha, c("loo", "waic", "bayes_R2"))
fit_alpha2 <- add_criterion(fit_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_alpha2 <- add_criterion(fit_validity_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_x_alpha2 <- add_criterion(fit_validity_x_alpha2, c("loo", "waic", "bayes_R2"))
fit_alpha1_alpha2 <- add_criterion(fit_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_alpha1_alpha2 <- add_criterion(fit_validity_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_validity_x_alpha1_alpha2 <- add_criterion(fit_validity_x_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_SSVEP <- add_criterion(fit_SSVEP, c("loo", "waic", "bayes_R2"))
fit_validity_SSVEP <- add_criterion(fit_validity_SSVEP, c("loo", "waic", "bayes_R2"))
fit_validity_x_SSVEP <- add_criterion(fit_validity_x_SSVEP, c("loo", "waic", "bayes_R2"))
fit_SSVEP_alpha <- add_criterion(fit_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_validity_SSVEP_alpha <- add_criterion(fit_validity_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_validity_x_SSVEP_alpha <- add_criterion(fit_validity_x_SSVEP_alpha, c("loo", "waic", "bayes_R2"))

# zscored models
fit_z_visalpha <- add_criterion(fit_z_visalpha, c("loo", "waic", "bayes_R2"))
fit_z_validity_visalpha <- add_criterion(fit_z_validity_visalpha, c("loo", "waic", "bayes_R2"))
fit_z_validity_x_visalpha <- add_criterion(fit_z_validity_x_visalpha, c("loo", "waic", "bayes_R2"))
fit_z_alpha2 <- add_criterion(fit_z_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_validity_alpha2 <- add_criterion(fit_z_validity_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_validity_x_alpha2 <- add_criterion(fit_z_validity_x_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_alpha1_alpha2 <- add_criterion(fit_z_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_validity_alpha1_alpha2 <- add_criterion(fit_z_validity_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_validity_x_alpha1_alpha2 <- add_criterion(fit_z_validity_x_alpha1_alpha2, c("loo", "waic", "bayes_R2"))
fit_z_SSVEP <- add_criterion(fit_z_SSVEP, c("loo", "waic", "bayes_R2"))
fit_z_validity_SSVEP <- add_criterion(fit_z_validity_SSVEP, c("loo", "waic", "bayes_R2"))
fit_z_validity_x_SSVEP <- add_criterion(fit_z_validity_x_SSVEP, c("loo", "waic", "bayes_R2"))
fit_z_SSVEP_alpha <- add_criterion(fit_z_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_z_validity_SSVEP_alpha <- add_criterion(fit_z_validity_SSVEP_alpha, c("loo", "waic", "bayes_R2"))
fit_z_validity_x_SSVEP_alpha <- add_criterion(fit_z_validity_x_SSVEP_alpha, c("loo", "waic", "bayes_R2"))




```

###   **exploratory diagnostics of model** [not run by default]
<br>

```{r brms model for RTs 01 explorative diagnostic, fig.height=6, fig.width=10, warning=FALSE, eval = FALSE}

# summarize
summary(fit_intercept)
summary(fit_validity)
summary(fit_visalpha)
summary(fit_validity_visalpha)
summary(fit_alpha2)
summary(fit_validity_alpha2)
summary(fit_alpha1_alpha2)
summary(fit_validity_alpha1_alpha2)
summary(fit_SSVEP)
summary(fit_validity_SSVEP)

# # coeff
# coef(fit_intercept)
# coef(fit_validity)
# coef(fit_visalpha)
# coef(fit_validity_visalpha)



# plot
plot(fit_intercept, ask = FALSE)
plot(fit_validity, ask = FALSE)
plot(conditional_effects(fit_validity), ask = FALSE)

plot(fit_visalpha, ask = FALSE)
plot(conditional_effects(fit_visalpha), ask = FALSE)
plot(fit_validity_visalpha, ask = FALSE)
plot(conditional_effects(fit_validity_visalpha), ask = FALSE)
plot(fit_validity_x_visalpha, ask = FALSE)
plot(conditional_effects(fit_validity_x_visalpha), ask = FALSE)

plot(fit_alpha2, ask = FALSE)
plot(conditional_effects(fit_alpha2), ask = FALSE)
plot(fit_validity_alpha2, ask = FALSE)
plot(conditional_effects(fit_validity_alpha2), ask = FALSE)
plot(fit_validity_x_alpha2, ask = FALSE)
plot(conditional_effects(fit_validity_x_alpha2), ask = FALSE)

plot(fit_alpha1_alpha2, ask = FALSE)
plot(conditional_effects(fit_alpha1_alpha2), ask = FALSE)
plot(fit_validity_alpha1_alpha2, ask = FALSE)
plot(conditional_effects(fit_validity_alpha1_alpha2), ask = FALSE)
plot(fit_validity_x_alpha1_alpha2, ask = FALSE)
plot(conditional_effects(fit_validity_x_alpha1_alpha2), ask = FALSE)

plot(fit_SSVEP, ask = FALSE)
plot(conditional_effects(fit_SSVEP), ask = FALSE)
plot(fit_validity_SSVEP, ask = FALSE)
plot(conditional_effects(fit_validity_SSVEP), ask = FALSE)
plot(fit_validity_x_SSVEP, ask = FALSE)
plot(conditional_effects(fit_validity_x_SSVEP), ask = FALSE)

# see fit
# pp_check(fit_intercept) 
# pp_check(fit_validity) 
# pp_check(fit_visalpha) 
# pp_check(fit_validity_visalpha)
# pp_check(fit_alpha2) 
# pp_check(fit_validity_alpha2)
# pp_check(fit_alpha1_alpha2) 
# pp_check(fit_validity_alpha1_alpha2)
# pp_check(fit_SSVEP) 
# pp_check(fit_validity_SSVEP) 

# see effects
# conditional_effects(fit_validity)
# conditional_effects(fit_validity_visalpha)

# compare model | alpha contra target
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_visalpha, fit_validity_visalpha,fit_validity_x_visalpha, criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# compare model | alpha contra nontarget
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_alpha2, fit_validity_alpha2, fit_validity_alpha2, criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# compare model | alpha contra target + contra nontarget
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_alpha1_alpha2, fit_validity_alpha1_alpha2, fit_validity_x_alpha1_alpha2, criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# compare model | SSVEP
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_SSVEP, fit_validity_SSVEP, fit_validity_x_SSVEP, criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# compare model | alpha contra target + contra nontarget
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_validity_visalpha, fit_validity_alpha2, fit_validity_alpha1_alpha2, criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# bayes_factor(fit_intercept, fit_validity)
model_comp_BayesR2 = as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_visalpha),bayes_R2(fit_validity_visalpha),
  bayes_R2(fit_alpha2),bayes_R2(fit_validity_alpha2), bayes_R2(fit_alpha1_alpha2),bayes_R2(fit_validity_alpha1_alpha2), 
  bayes_R2(fit_SSVEP), bayes_R2(fit_validity_SSVEP),
  bayes_R2(fit_validity_x_visalpha), bayes_R2(fit_validity_x_alpha2), bayes_R2(fit_validity_x_alpha1_alpha2), bayes_R2(fit_validity_x_SSVEP)), 
  row.names = c("fit_intercept","fit_validity","fit_visalpha","fit_validity_visalpha",
                "fit_alpha2","fit_validity_alpha2",
                "fit_alpha1_alpha2","fit_validity_alpha1_alpha2",
                "fit_SSVEP","fit_validity_SSVEP","fit_validity_x_visalpha","fit_validity_x_alpha2","fit_validity_x_alpha1_alpha2",
                "fit_validity_x_SSVEP"))

kable(model_comp_BayesR2)



```




###   **model comparison** each measure
<br>

```{r brms model for RTs explorative diagnostic2, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
# alpha contra target
loo_compare(fit_intercept, fit_validity, fit_visalpha, fit_validity_visalpha, fit_validity_x_visalpha, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra target models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_visalpha), bayes_R2(fit_validity_visalpha), bayes_R2(fit_validity_x_visalpha)),
  row.names = c("fit_intercept","fit_validity","fit_visalpha","fit_validity_visalpha","fit_validity_x_visalpha"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra target models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# alpha contra nontarget
loo_compare(fit_intercept, fit_validity, fit_alpha2, fit_validity_alpha2, fit_validity_x_alpha2, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra nontarget models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_alpha2), bayes_R2(fit_validity_alpha2), bayes_R2(fit_validity_x_alpha2)),
  row.names = c("fit_intercept","fit_validity","fit_alpha2","fit_validity_alpha2","fit_validity_x_alpha2"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra nontarget models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# target ssvep
loo_compare(fit_intercept, fit_validity, fit_SSVEP, fit_validity_SSVEP, fit_validity_x_SSVEP, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("target SSVEP models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_SSVEP), bayes_R2(fit_validity_SSVEP), bayes_R2(fit_validity_x_SSVEP)),
  row.names = c("fit_intercept","fit_validity","fit_SSVEP","fit_validity_SSVEP","fit_validity_x_SSVEP"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("target SSVEP models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# alpha validity combined models
loo_compare(fit_intercept, fit_validity, fit_validity_visalpha, fit_validity_alpha2, fit_validity_x_visalpha, fit_validity_x_alpha2,
            fit_validity_alpha1_alpha2, fit_validity_x_alpha1_alpha2, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("combined alpha models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_validity_visalpha), bayes_R2(fit_validity_alpha2),
  bayes_R2(fit_validity_x_visalpha), bayes_R2(fit_validity_x_alpha2), bayes_R2(fit_validity_alpha1_alpha2),
  bayes_R2(fit_validity_x_alpha1_alpha2)),
  row.names = c("fit_intercept","fit_validity","fit_validity_visalpha", "fit_validity_alpha2","fit_validity_x_visalpha",
                "fit_validity_x_alpha2", "fit_validity_alpha1_alpha2", "fit_validity_x_alpha1_alpha2"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("combined alpha models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


# all models with validity as predictor
loo_compare(fit_intercept, fit_validity,
            fit_validity_visalpha, fit_validity_x_visalpha,
            fit_validity_alpha2, fit_validity_x_alpha2,
            fit_validity_alpha1_alpha2, fit_validity_x_alpha1_alpha2, 
            fit_validity_SSVEP, fit_validity_x_SSVEP, 
            fit_validity_SSVEP_alpha, fit_validity_x_SSVEP_alpha, 
            criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha, ssvep and combined models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity),
  bayes_R2(fit_validity_visalpha), bayes_R2(fit_validity_x_visalpha),
  bayes_R2(fit_validity_alpha2), bayes_R2(fit_validity_x_alpha2),
  bayes_R2(fit_validity_alpha1_alpha2), bayes_R2(fit_validity_x_alpha1_alpha2),
  bayes_R2(fit_validity_SSVEP), bayes_R2(fit_validity_x_SSVEP),
  bayes_R2(fit_validity_SSVEP_alpha), bayes_R2(fit_validity_x_SSVEP_alpha)),
  row.names = c("fit_intercept","fit_validity",
                "fit_validity_visalpha", "fit_validity_x_visalpha",
                "fit_validity_alpha2", "fit_validity_x_alpha2",
                "fit_validity_alpha1_alpha2", "fit_validity_x_alpha1_alpha2",
                "fit_validity_SSVEP","fit_validity_x_SSVEP",
                "fit_validity_SSVEP_alpha", "fit_validity_x_SSVEP_alpha"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha, ssvep and combined models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


```


###   **model comparison zscored signals** each measure
<br>

```{r brms model for RTs explorative diagnostic2 z, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
# alpha contra target
loo_compare(fit_intercept, fit_validity, fit_z_visalpha, fit_z_validity_visalpha, fit_z_validity_x_visalpha, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra target models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_z_visalpha), bayes_R2(fit_z_validity_visalpha), bayes_R2(fit_z_validity_x_visalpha)),
  row.names = c("fit_intercept","fit_validity","fit_z_visalpha","fit_z_validity_visalpha","fit_z_validity_x_visalpha"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra target models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# alpha contra nontarget
loo_compare(fit_intercept, fit_validity, fit_z_alpha2, fit_z_validity_alpha2, fit_z_validity_x_alpha2, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra nontarget models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_z_alpha2), bayes_R2(fit_z_validity_alpha2), bayes_R2(fit_z_validity_x_alpha2)),
  row.names = c("fit_intercept","fit_validity","fit_z_alpha2","fit_z_validity_alpha2","fit_z_validity_x_alpha2"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha contra nontarget models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# target ssvep
loo_compare(fit_intercept, fit_validity, fit_z_SSVEP, fit_z_validity_SSVEP, fit_z_validity_x_SSVEP, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("target SSVEP models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_z_SSVEP), bayes_R2(fit_z_validity_SSVEP), bayes_R2(fit_z_validity_x_SSVEP)),
  row.names = c("fit_intercept","fit_validity","fit_z_SSVEP","fit_z_validity_SSVEP","fit_z_validity_x_SSVEP"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("target SSVEP models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# alpha validity combined models
loo_compare(fit_intercept, fit_validity, fit_z_validity_visalpha, fit_z_validity_alpha2, fit_z_validity_x_visalpha, fit_z_validity_x_alpha2,
            fit_z_validity_alpha1_alpha2, fit_z_validity_x_alpha1_alpha2, criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("combined alpha models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_z_validity_visalpha), bayes_R2(fit_z_validity_alpha2),
  bayes_R2(fit_z_validity_x_visalpha), bayes_R2(fit_z_validity_x_alpha2), bayes_R2(fit_z_validity_alpha1_alpha2),
  bayes_R2(fit_z_validity_x_alpha1_alpha2)),
  row.names = c("fit_intercept","fit_validity","fit_z_validity_visalpha", "fit_z_validity_alpha2","fit_z_validity_x_visalpha",
                "fit_z_validity_x_alpha2", "fit_z_validity_alpha1_alpha2", "fit_z_validity_x_alpha1_alpha2"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("combined alpha models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


# all models with validity as predictor
loo_compare(fit_intercept, fit_validity,
            fit_z_validity_visalpha, fit_z_validity_x_visalpha,
            fit_z_validity_alpha2, fit_z_validity_x_alpha2,
            fit_z_validity_alpha1_alpha2, fit_z_validity_x_alpha1_alpha2, 
            fit_z_validity_SSVEP, fit_z_validity_x_SSVEP, 
            fit_z_validity_SSVEP_alpha, fit_z_validity_x_SSVEP_alpha, 
            criterion = c("loo"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha, ssvep and combined models | loo comparison")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity),
  bayes_R2(fit_z_validity_visalpha), bayes_R2(fit_z_validity_x_visalpha),
  bayes_R2(fit_z_validity_alpha2), bayes_R2(fit_z_validity_x_alpha2),
  bayes_R2(fit_z_validity_alpha1_alpha2), bayes_R2(fit_z_validity_x_alpha1_alpha2),
  bayes_R2(fit_z_validity_SSVEP), bayes_R2(fit_z_validity_x_SSVEP),
  bayes_R2(fit_z_validity_SSVEP_alpha), bayes_R2(fit_z_validity_x_SSVEP_alpha)),
  row.names = c("fit_intercept","fit_validity",
                "fit_z_validity_visalpha", "fit_z_validity_x_visalpha",
                "fit_z_validity_alpha2", "fit_z_validity_x_alpha2",
                "fit_z_validity_alpha1_alpha2", "fit_z_validity_x_alpha1_alpha2",
                "fit_z_validity_SSVEP","fit_z_validity_x_SSVEP",
                "fit_z_validity_SSVEP_alpha", "fit_z_validity_x_SSVEP_alpha"))%>%
  kable(escape = F, digits = c(6,6,6,6,6,6,6,6,6), caption = c("alpha, ssvep and combined models | bayes_R2")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


```

###   **model comparison**
<br>

```{r brms model for RTs diagnostics, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}

# compare validity model to model with all data
# compare model | alpha contra target + contra nontarget
modelcomparison_loo <- 
  loo_compare(fit_intercept, fit_validity, fit_validity_visalpha, fit_validity_alpha2, fit_validity_alpha1_alpha2, fit_validity_SSVEP, fit_validity_SSVEP_alpha,
              criterion = c("loo"))
as.data.frame(modelcomparison_loo)

# bayes_factor(fit_intercept, fit_validity)
model_comp_BayesR2 = as.data.frame(rbind(
  bayes_R2(fit_intercept), bayes_R2(fit_validity), bayes_R2(fit_validity_visalpha), bayes_R2(fit_validity_alpha2),
  bayes_R2(fit_validity_alpha1_alpha2), bayes_R2(fit_validity_SSVEP), bayes_R2(fit_validity_SSVEP_alpha)), 
  row.names = c("fit_intercept","fit_validity","fit_validity_visalpha","fit_validity_alpha2",
                "fit_validity_alpha1_alpha2","fit_validity_SSVEP", "fit_validity_SSVEP_alpha1_alpha2")
  )

model_comp_BayesR2



```


###   **model description | best model**
<br>

```{r brms model for RTs best model description, fig.height=6, fig.width=10, warning=FALSE, eval = TRUE}
# it seems as the model with visual alpha contra to the target and contra to the non target is superior?
best_brms_model <-  fit_validity_alpha1_alpha2
summary(best_brms_model)

plot(best_brms_model, ask = FALSE)
plot(conditional_effects(best_brms_model), ask = FALSE)
plot(conditional_effects(best_brms_model, spaghetti=TRUE, ndraws = 100, points = TRUE), ask = FALSE)


# extract the posterior draws
post_fit <- posterior_samples(best_brms_model, , add_chain = T)

# plot the intercept for chains
mcmc_dens_overlay(post_fit, pars = c("b_Intercept")) +
  theme(panel.grid = element_blank())
mcmc_dens_overlay(post_fit, pars = c("b_cue_validity_labelneutral")) +
  theme(panel.grid = element_blank())

# rhat
brms::rhat(best_brms_model)["b_Intercept"]


pp_check(best_brms_model)
pp_check(best_brms_model, type = "error_hist", ndraws=11)
pp_check(best_brms_model, type = "scatter_avg", ndraws=100)
pp_check(best_brms_model, type = "stat_2d")
pp_check(best_brms_model, type = "loo_pit")

best_brms_model.draws <- as_draws_df(best_brms_model)
# tidybayes::summarise_draws(best_brms_model.draws) #not working




```



<br>
#### use best model and estimate and visualize effects

```{r best model effect estimation,  fig.height=3.5, fig.width=5, warning=FALSE, eval = TRUE}
# based on https://www.andrewheiss.com/blog/2021/11/10/ame-bayes-re-guide/
# which model to use?
bestmodel.ef.model <- fit_validity_alpha1_alpha2
# what is the data of the model?
bestmodel.ef.data <- fit_validity_alpha1_alpha2$data
# see data
head(bestmodel.ef.data)

# show effects of the model
tidy(bestmodel.ef.model)

# create new data to use for posterior predictive distribution
bestmodel.ef.newdata <- expand_grid(
  cue_validity_label = c('valid','neutral','invalid'),
  contra_target = c(10),
  contra_nontarget = c(10),
  subject = c(90)
)
# with NA for irrelevant factors (does it work? --> NO!)
bestmodel.ef.newdata2 <- expand_grid(
  cue_validity_label = c('valid','neutral','invalid'),
  contra_target = as.factor(NA),
  contra_nontarget = as.factor(NA),
  subject = as.factor(NA)
)

# use range of data from orignal study 
bestmodel.ef.newdata3 <- expand_grid(
  cue_validity_label = c('valid','neutral','invalid'),
  contra_target = median(bestmodel.ef.data$contra_target),
  contra_nontarget = median(bestmodel.ef.data$contra_nontarget),
  # contra_target = seq(min(bestmodel.ef.data$contra_target),max(bestmodel.ef.data$contra_target),1),
  # contra_nontarget = seq(min(bestmodel.ef.data$contra_nontarget),max(bestmodel.ef.data$contra_nontarget),1),
  # subject = as.factor(unique(bestmodel.ef.data$subject))
  subject = as.factor(c(120)) # for a 'new' subject
)

# use 'predicted_draws' to draw from posterior predictive distribution
# this still incorporates variance of each individual observation in the model
# we may not want to have this around for marginal effects, awe we're more focused on the expected value
bestmodel.ef.tidy_pred <- bestmodel.ef.model %>%
  predicted_draws(newdata = bestmodel.ef.newdata3, allow_new_levels = TRUE)
head(bestmodel.ef.tidy_pred)

# use 'expected draws' ('epred_draws') as we're more intereste in the expected value of the outcome
# which means we’re more focused on the uncertainty in the model parameters and not necessarily the individual-level residuals
# same as fitte function (only with nicer wrapper)
bestmodel.ef.tidy_exppred <- bestmodel.ef.model %>%
  epred_draws(newdata = bestmodel.ef.newdata3, allow_new_levels = TRUE)
head(bestmodel.ef.tidy_exppred)

# plot variance and effects of predicted data
ggplot(bestmodel.ef.tidy_exppred, aes(x = .epred, fill = cue_validity_label)) +
  stat_halfeye(position = position_dodgejust(width = .3)) +
  labs(x = "predicted RT in ms", y = "Density", fill = "Cue Validity") +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))
theme(legend.position = "bottom")


# different plot
theme_set(theme_bw())
plot1 <-
  ggplot(bestmodel.ef.tidy_exppred, aes(
    x = .epred, 
    fill = cue_validity_label, fill_ramp = after_stat(abs(x)), 
    color_ramp = after_stat(-dnorm(x, 0, 2))
  )) +
  stat_slab(
    height = 2, color = "gray15",
    expand = TRUE, trim = TRUE,
    fill_type = "segments",
    show.legend = FALSE,
    position = position_dodgejust(0.3),
  )+
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), axis.title.x = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  xlim(c(450, 900))

plot2 <-
  ggplot(bestmodel.ef.tidy_exppred, aes(
    x = .epred, 
    fill = cue_validity_label
  )) +
  stat_pointinterval(position = position_dodge(width = .4, preserve = "single"), 
                     aes(color=cue_validity_label)) +
  theme(axis.text.y=element_blank(),axis.ticks.y=element_blank(), axis.title.y = element_blank())+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  scale_x_continuous(name="RT in ms", breaks=waiver(), labels=waiver(), limits=c(450,900))+
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))

# cowplot::plot_grid(plot1, plot2, plot3, ncol = 3,labels = "AUTO")
plotttitle <- ggdraw() + draw_label("predicted RT in ms | average parameters", fontface='bold')
plotplots <- ggarrange(plot1, plot2, nrow = 2, align = "v", heights =c(4,2), common.legend = TRUE)
ggarrange(plotttitle, plotplots, nrow = 2, heights=c(0.1, 1))


# now we want to see the effects using emmeans
# check cue validity effect via pairwise comparisons
# first the emmeans (point estimate = median of distrbution)
bestmodel.ef.model %>% 
  emmeans(~ cue_validity_label,
          epred = TRUE)%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), 
        caption = c("average marginal effect | point measure = median of RT in ms")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# pairwise comparisons
bestmodel.ef.model %>% 
  emmeans(~ cue_validity_label,
          epred = TRUE)%>% 
  contrast(method = "revpairwise")%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), 
        caption = c("average marginal effect differences | point measure = median of RT in ms")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

# now gather all the single draws to be able to plot the variance predicted RTs for different validity levels
bestmodel.ef.ef_draws_validity <- bestmodel.ef.model %>% 
  emmeans(~ cue_validity_label,
          epred = TRUE)%>% 
  gather_emmeans_draws()

theme_set(theme_bw())
ggplot(bestmodel.ef.ef_draws_validity, aes(y = cue_validity_label, x = .value)) +
  stat_halfeye(
    aes(fill = cue_validity_label, fill_ramp = after_stat(level)),
    .width = c(.95, 1),
    position = "dodgejust",
  ) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83")) +
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  labs(
    title = "Average predicted RTs in ms", 
    subtitle = "for all draws of the model",
    fill_ramp = "interval",
    x = "difference in ms",
    y = "validity"
  )


# now gather all the single draws to be able to plot the variance of the contrast
bestmodel.ef.ef_draws_validity_contr <- bestmodel.ef.model %>% 
  emmeans(~ cue_validity_label,
          epred = TRUE)%>% 
  contrast(method = "revpairwise") %>%
  gather_emmeans_draws()

# plot the variance of the the effect (i.e. the averahe marginal effect)
theme_set(theme_bw())
ggplot(bestmodel.ef.ef_draws_validity_contr, aes(x = .value, fill = contrast)) +
  stat_halfeye() +
  geom_vline(xintercept = 0)+
  facet_grid(.~contrast) +
  labs(x = "Average marginal effect in ms", y = "Density") +
  theme(legend.position = "bottom")


theme_set(theme_bw())
ggplot(bestmodel.ef.ef_draws_validity_contr, aes(y = contrast, x = .value)) +
  stat_halfeye(
    aes(fill = contrast, fill_ramp = after_stat(level)),
    .width = c(.95, 1),
    position = "dodgejust",
  ) +
  geom_vline(xintercept = 0)+
  labs(
    title = "Average marginal effect in ms", 
    subtitle = "for all draws of the model",
    fill_ramp = "interval",
    x = "difference in ms",
    y = "validity"
  )


# now trying to get the regression line right for the alpha predictors


## alpha contra target
# use range of data from orignal study with varying alpha contra target (in range of original data)
bestmodel.ef.newdata4 <- expand_grid(
  cue_validity_label = c('valid','neutral','invalid'),
  # contra_target = median(bestmodel.ef.data$contra_target),
  contra_nontarget = median(bestmodel.ef.data$contra_nontarget),
  contra_target = seq(min(bestmodel.ef.data$contra_target),max(bestmodel.ef.data$contra_target),1),
  # contra_nontarget = seq(min(bestmodel.ef.data$contra_nontarget),max(bestmodel.ef.data$contra_nontarget),1),
  # subject = as.factor(unique(bestmodel.ef.data$subject))
  subject = as.factor(c(120)) # for a 'new' subject
)

# use 'expected draws' ('epred_draws') as we're more intereste in the expected value of the outcome
# which means we’re more focused on the uncertainty in the model parameters and not necessarily the individual-level residuals
# same as fitte function (only with nicer wrapper)
bestmodel.ef.tidy_exppred2 <- bestmodel.ef.model %>%
  epred_draws(newdata = bestmodel.ef.newdata4, allow_new_levels = TRUE)
head(bestmodel.ef.tidy_exppred2)

theme_set(theme_bw())
ggplot(bestmodel.ef.tidy_exppred2, aes(x = contra_target, y = .epred)) +
  stat_lineribbon(.width = c(0.5, 0.8, 0.95, 1)) + 
  scale_fill_brewer(palette = "Reds") +
  labs(x = "alpha amplitude contra target", y = "predicted RT",
       fill = "Credible interval") +
  theme(legend.position = "bottom")

## alpha contra nontarget
# use range of data from orignal study with varying alpha contra target (in range of original data)
bestmodel.ef.newdata5 <- expand_grid(
  cue_validity_label = c('valid','neutral','invalid'),
  contra_target = median(bestmodel.ef.data$contra_target),
  # contra_nontarget = median(bestmodel.ef.data$contra_nontarget),
  # contra_target = seq(min(bestmodel.ef.data$contra_target),max(bestmodel.ef.data$contra_target),1),
  contra_nontarget = seq(min(bestmodel.ef.data$contra_nontarget),max(bestmodel.ef.data$contra_nontarget),1),
  # subject = as.factor(unique(bestmodel.ef.data$subject))
  subject = as.factor(c(120)) # for a 'new' subject
)

# use 'expected draws' ('epred_draws') as we're more intereste in the expected value of the outcome
# which means we’re more focused on the uncertainty in the model parameters and not necessarily the individual-level residuals
# same as fitte function (only with nicer wrapper)
bestmodel.ef.tidy_exppred3 <- bestmodel.ef.model %>%
  epred_draws(newdata = bestmodel.ef.newdata5, allow_new_levels = TRUE)
head(bestmodel.ef.tidy_exppred3)

theme_set(theme_bw())
ggplot(bestmodel.ef.tidy_exppred3, aes(x = contra_nontarget, y = .epred)) +
  stat_lineribbon(.width = c(0.5, 0.8, 0.95, 1)) + 
  scale_fill_brewer(palette = "Blues") +
  labs(x = "alpha amplitude contra nontarget", y = "predicted RT",
       fill = "Credible interval") +
  theme(legend.position = "bottom")

# now lets get the slop of the modulation by alpha
bestmodel.ef.slope_contraTarget <- bestmodel.ef.model %>% 
  emtrends(~ 1, # 1 means, we want the average slop
           var = "contra_target",
           epred = TRUE) %>% 
  gather_emmeans_draws()

bestmodel.ef.slope_contraNontarget <- bestmodel.ef.model %>% 
  emtrends(~ 1, # 1 means, we want the average slop
           var = "contra_nontarget",
           epred = TRUE) %>% 
  gather_emmeans_draws()

bestmodel.ef.slopes_alpha <- bind_rows(
  "contra_target" = bestmodel.ef.slope_contraTarget,
  "contra_nontarget" = bestmodel.ef.slope_contraNontarget,
  .id = "alpha_signal") %>% 
  mutate(alpha_signal = fct_inorder(alpha_signal))

theme_set(theme_bw())
ggplot(bestmodel.ef.slopes_alpha, aes( x = .value)) +
  stat_halfeye(
    aes(fill = alpha_signal, fill_ramp = after_stat(level)),
    .width = c(.95, 1),
  ) +
  # stat_dots(aes(fill = alpha_signal,color = alpha_signal, fill_ramp = after_stat(level), colour_ramp = after_stat(level)),
  #           .width = c(.95, 1))+
  geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("red3","steelblue")) +
  scale_color_manual(values=c("red3", "steelblue"))+
  labs(
    title = "Average marginal effect: alpha slopes", 
    subtitle = "for all draws of the model",
    fill_ramp = "interval",
    colour_ramp = "interval",
    x = "slope"
  )


```