---
title: "Behavioral Analysis Posner+SSVEP paradigm"
author: '[Christopher Gundlach](https://www.researchgate.net/profile/Christopher_Gundlach)'
date: '`r Sys.Date()`'
output:
  html_document:
    code_folding: hide
    toc: true
    toc_float: true
    toc_depth: 4
    theme: flatly
---
# Initialisierung  
**Setting up R libraries**

```{r set up libraries,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
# Setup the work environment
options(width=120,scipen=0,digits=6) # change output width (for better printing), scientific notation (to disable it: scipen=999), constrain output to 3 decimals
cat("\014") # clear console
# dev.off() # clear plots (if no plots are present, comment it out or it will throw an error)
rm(list=ls()) # clear environment
wd="C:/Users/psy05cvd/Dropbox/work/R-statistics/experiments/ssvep_posnalpha_behave/" # work directory
setwd(wd) # set work directory

# Load relevant libraries:



library(plyr)
library(psych)
library(ez)
library(ggplot2)
library(schoRsch)
library(lsr)
library(kableExtra)
library(ggbeeswarm)
library(afex)
library(lmerTest)
library(emmeans)
library(lsmeans)
library(sjPlot)
library(viridis)
library(multcomp)

library(cowplot)
library(dplyr)
library(readr)

library(ggpol)
library(ggpubr)
library(tidyverse)
library(effectsize)

library(broom)

source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/R_rainclouds.R')
source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/summarySE.R')
source('C:/Users/psy05cvd/Dropbox/work/R-statistics/general_functions/RainCloudPlots/tutorial_R/simulateData.R')

datafile1 <- "data_in/Behavior_FFT_singletrials_target.txt"
timewindows = c("[-1000 0]ms", "[0 1000]ms")

```
<style type="text/css">
.main-container {
  max-width: 1800px !important;
  margin-left: auto;
  margin-right: auto;
}
</style>

# Analysis of electrophysiological data (Posner Paradigma)  
<br>  

## subaveraged Daten werden geladen
Loading data `r toString(datafile1)`

The data has the following structure

* trialnumber = trial
* blocknumber
* trial_timing_type = 1=regular; 2=control
* cue_validity = 1=valid, 2=invalid, 3=neutral
* cue_validity_label
* cue_direction = 1=left, 2=right
* cue_direction_label
* cue_onset_fr = frame number of cue presentation
* cue_onset_t_est = onset time in ms
* cue_onset_t_meas = nan
* pre_event_type = 1=shorter, 2=longer, NaN=no event
* pre_event_onset_fr = onset frame of event
* pre_event_onset_t_est = onset time in ms
* pre_event_onset_t_meas = nan
* post_event_pos = position of post event: 1 = left, 2=right
* post_event_pos_label
* post_event_direction = direction of target (-90:90)=top; 
* post_event_direction_c = category of target position: 1=top; 2=bottom
* post_event_direction_c_l = label
* post_event_dimenstion = size in degrees
* post_event_onset_fr = onset frames of event
* post_event_onset_t_est = onset times of events
* post_event_onset_t_meas = nan
* triggernum = trigger number
* pre_hit = empty=no event, TRUE=hit, 0=error, NaN=miss
* pre_RT = RT in ms
* post_hit = TRUE=hit, 0=error, NaN=miss
* post_RT = RT in ms
* subject
* FFT measures ...



```{r load data,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
# Load the data
DATA.In_long <- read.csv(datafile1, header=TRUE,check.names=FALSE, sep =",", dec = ".")
#str(DATA.In_long)
DATA.In_long$trialnumber <- as.factor(DATA.In_long$trialnumber)
DATA.In_long$blocknumber <- as.factor(DATA.In_long$blocknumber)
DATA.In_long$trial_timing_type <- as.factor(DATA.In_long$trial_timing_type)
DATA.In_long$cue_validity <- as.factor(DATA.In_long$cue_validity)
DATA.In_long$cue_direction <- as.factor(DATA.In_long$cue_direction)
DATA.In_long$pre_event_type <- as.factor(DATA.In_long$pre_event_type)
DATA.In_long$post_event_pos <- as.factor(DATA.In_long$post_event_pos)
DATA.In_long$post_event_direction_c <- as.factor(DATA.In_long$post_event_direction_c)
```

# Manipulation of data
long into wide format


```{r edit data,echo=FALSE,warning=FALSE,message=FALSE,results="hide"}
DATA.In_wide <- DATA.In_long %>%
  pivot_longer(
    cols = SSVEP_leftStim_win1:visualAlpha_rightHand_win2,
    names_to = c("signal","side","time"),
    names_pattern = "(.*)_(.*)_(.*)",
    values_to = "amplitude"
  ) %>%
  mutate(pos_rel_target = as.factor(ifelse(
    post_event_pos_label == "left" & (side == "leftHand" | side == "leftStim"), "contra_target", ifelse(
      post_event_pos_label == "right" & (side == "leftHand" | side == "leftStim"), "contra_nontarget", ifelse(
        post_event_pos_label == "left" & (side == "rightHand" | side == "rightStim"), "contra_nontarget", "contra_target"
      )
    ))
  ))%>%
  mutate(attention = case_when(
    pos_rel_target == "contra_target" & cue_validity_label == "valid" ~ "cued",
    pos_rel_target == "contra_target" & cue_validity_label == "invalid" ~ "uncued",
    pos_rel_target == "contra_nontarget" & cue_validity_label == "valid" ~ "uncued",
    pos_rel_target == "contra_nontarget" & cue_validity_label == "invalid" ~ "cued",
    cue_validity_label == "neutral" ~ "neutral"
  ))%>%
  mutate(attention = factor(attention, levels=c('uncued','neutral','cued'), ordered = T))%>%
  mutate(time=case_when(
      time == "win1" ~ timewindows[1],
      time == "win2" ~ timewindows[2]
  ))%>%
  mutate(post_hit = case_when(
    post_hit == "1" ~ "hit",
    post_hit == "NaN" ~ "miss",
    post_hit == "0" ~ "error"
  ))

  # mapvalues(DATA.In_wide$time, from=c("win1", "win2"), to=timewindows)

```

# Illustration of Data  
<br> 

## Plots
<br> 
1a  Illustrate Data as is

* pooled across left and right side and only hits

<br>  

```{r plot_data_st, results = "hide",  fig.height=3, fig.width=9, warning = FALSE}
# str(DATA.In_wide)
dat_plot <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()
  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("SSVEP | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("visual alpha | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                     y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  # scale_x_discrete("ceuing condition", breaks=waiver(), 
  #                  labels = c("inva","lid","neut","ral","val","id")) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","valid")) +
  ggtitle("motor alpha | rel. to cue")



```

<br> 

1b  Illustrate Data as is

* plot modulation pooled across left and right side and only hits

<br>  

```{r plot_data_st2, results = "hide",  fig.height=3, fig.width=5, warning = FALSE}
# str(DATA.In_wide)
dat_plot <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post")
  filter(time == "[-1000 0]ms")

  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
  ylab('modulation in %')+
  ggtitle("SSVEP | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
   ylab('modulation in %')+
  ggtitle("visual alpha | rel. to cue")


dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=interaction( pos_rel_target, cue_validity_label), 
                              y=amplitude, fill=pos_rel_target, color = pos_rel_target,)) +
  geom_line(aes(group = interaction(subject, cue_validity_label)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = pos_rel_target, x = interaction( pos_rel_target, cue_validity_label), group = pos_rel_target), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =pos_rel_target), geom='errorbar', width=0.9, size=1.5) +
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = c("invalid","invalid","neutral","neutral","valid","validid")) +
  ylab('modulation in %')+
  ggtitle("motor alpha | rel. to cue")



```

<br> 
1a  Illustrate Data as is

* pooled across left and right side and only hits

<br>  

```{r plot_data_st3, results = "hide",  fig.height=3, fig.width=5, warning = FALSE}
# str(DATA.In_wide)
dat_plot <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()
  
  
dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("SSVEP | attent. focus")


dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("visual alpha | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = interaction(subject)),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  facet_grid(.~time) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ggtitle("motor alpha | attent. focus")


```
<br> 

1b  Illustrate Data as is

* plot modulation pooled across left and right side and only hits

<br>  

```{r plot_data_st4, results = "hide",  fig.height=3, fig.width=3, warning = FALSE}
# str(DATA.In_wide)
dat_plot <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post")
  filter(time == "[-1000 0]ms")

dat2plot <- dat_plot %>%
  filter(signal == "SSVEP")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('amplitude')+
  ggtitle("SSVEP | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "visualAlpha")


theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('amplitude')+
  ggtitle("visual alpha | attent. focus")



dat2plot <- dat_plot %>%
  filter(signal == "motorAlpha")
 

theme_set(theme_bw())
ggplot(dat2plot, aes(x=attention, y=amplitude, fill=attention, color = attention,)) +
  geom_line(aes(group = subject  ),alpha = 0.3, colour = "grey60") +
  geom_beeswarm(aes(color = attention, x = attention, group = attention), 
                cex=2, size = 3, shape=21,alpha=1,fill="grey40",shape=21)+
  stat_summary(fun=mean, aes(ymin=..y.., ymax=..y.., color =attention), geom='errorbar', width=0.9, size=1.5) +
  scale_fill_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_color_manual(values=c("#F1831A", "#293C4A", "#198A83"))+
  scale_x_discrete("ceuing condition", breaks=waiver(), 
                   labels = waiver()) +
  ylab('amplitude')+
  ggtitle("motor alpha | attent. focus")
```


## descriptive data 
<br>  

### electrophysiological measures

validity x target_position

```{r R_valXside, echo=FALSE}
DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post") %>%
  filter(time == "[-1000 0]ms") %>%
  group_by(signal, cue_validity_label, pos_rel_target)%>%
  dplyr::summarise(M = mean(amplitude), SD = sd(amplitude))%>%
  ungroup()%>%
  mutate(cue_validity_label = factor(cue_validity_label, levels=c('invalid','neutral','valid'), ordered = T))%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), caption = c("average response measures")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post") %>%
  filter(time == "[-1000 0]ms") %>%
  group_by(signal, attention)%>%
  dplyr::summarise(M = mean(amplitude), SD = sd(amplitude))%>%
  ungroup()%>%
  kable(escape = F, digits = c(3,3,3,6,3,3,3,3,3), caption = c("average response measures")) %>%
  # kable_classic(full_width = F) %>%
  column_spec(1, bold = T)%>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
 


```





## tests  
<br>  

test of general model

### ANOVA electrophysiological measures
<br>  

ANOVA_RM for electrophysiological measures:ATTENTION(cued, neutral, uncued)

```{r ANOVA_RT_ValXSei, message=FALSE, warning=FALSE, include=TRUE}
#ANOVAe
DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post")%>%
  filter(time == "[-1000 0]ms") %>%
  group_by(signal)%>%
  nest() %>%
  mutate(stats= purrr::map(data, ~broom::tidy(
    anova(aov_ez(id="subject", dv = "amplitude", data = ., within = "attention"))
  ))) %>%
  dplyr::select(-data) %>%
  unnest()%>%
  mutate(
    `p.value` = cell_spec(ifelse(round(`p.value`,4)<.001,"< .001",round(`p.value`,4)), 
                        color = ifelse(is.nan(`p.value`),"blue", ifelse(`p.value` < .05, "green", "red")),
                        bold = ifelse(is.nan(`p.value`),F, ifelse(`p.value` < .05, T,F)),
                        align = "center")
  ) %>%
  dplyr::select(signal, term, `num.Df`, `den.Df`, MSE, `statistic`, ges, `p.value`) %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("repeated measures ANOVA ")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))



```

### Post-hoc t-Tests electrophysiological measures (cued vs neutral vs uncued)  
<br>


```{r post-hoc t_tests RT, echo=FALSE}
dat2model <-DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, post_event_pos_label, signal, time, amplitude, attention)%>%
  group_by(subject, post_event_pos_label, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  # mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, signal, time, attention) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post")
  filter(time == "[-1000 0]ms")

# models
anovamodel_SSVEP <- dat2model %>%
  filter(signal == "SSVEP") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)
anovamodel_visalpha <- dat2model %>%
  filter(signal == "visualAlpha") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)
anovamodel_motalpha <- dat2model %>%
  filter(signal == "motorAlpha") %>%
  aov_ez(id="subject", dv = "amplitude", data = ., within = "attention", include_aov = TRUE)

# posthocs
post_hocs.SSVEP <- emmeans(anovamodel_SSVEP$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm
post_hocs.visalpha <- emmeans(anovamodel_visalpha$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm
post_hocs.motalpha <- emmeans(anovamodel_motalpha$aov, "attention", contr = "pairwise",adjust = "holm") # adjust = holm

# output
post_hocs.SSVEP$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = SSVEP")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.SSVEP$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = SSVEP | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


post_hocs.visalpha$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = visual alpha")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.visalpha$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = visual alpha | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

post_hocs.motalpha$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated marginal means | by att. focus | dv = motor alpha")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

summary(post_hocs.motalpha$contrasts) %>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "left")
  ) %>%
  mutate(CohensD = `t.ratio`/sqrt(df+1))%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("contrasts for estimated marginal means | by att. focus | dv = motor alpha | corrected: Holm")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))


```


## Additional models
<br>

### linear mixed models SSVEP
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **SSVEP ~ Validity * Position + ( 1 | subjects)**


```{r linear mixed model SSVEP 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post", signal == "SSVEP")
  filter(time == "[-1000 0]ms", signal == "SSVEP")



lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("SSVEP | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model SSVEP 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(10,  10),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(10, 10),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0.22, -0.22, 0.22, -0.22),
            nudge_y = c(10, 10, 10),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models visual alpha
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **visual alpha ~ Validity * Position + ( 1 | subjects)**


```{r linear mixed model visual alpha 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post", signal == "visualAlpha")
  filter(time == "[-1000 0]ms", signal == "visualAlpha")

lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("visual Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model visual alpha 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(5, 5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(5, 5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0.22, -0.22, 0.22, -0.22),
            nudge_y = c(5, 5, 5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models motor alpha
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on averaged data

testing **motor alpha ~ Validity * position + ( 1 | subjects)**


```{r linear mixed model motor alpha 01 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  group_by(subject, cue_validity_label, post_event_pos_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  group_by(subject, cue_validity_label, signal, time, pos_rel_target) %>%
  dplyr::summarise(amplitude=mean(amplitude))%>%
  ungroup()%>%
  # filter(time == "pre_to_post", signal == "motorAlpha")
  filter(time == "[-1000 0]ms", signal == "motorAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("motor Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```

2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model motor alpha 01 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(5,  5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0, -0),
            nudge_y = c(5,  5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(nudge_x = c(0.22, -0.22, 0.22, -0.22),
            nudge_y = c(5, 5, 5, 5),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models SSVEP II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **SSVEP ~ Validity * position + ( 1 | subjects)**


```{r linear mixed model SSVEP 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
  filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  # filter(time == "pre_to_post", signal == "SSVEP")
  filter(time == "[-1000 0]ms", signal == "SSVEP")



lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("SSVEP | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")



```

2.  model description of best model
    + Best model is **`r toString(best_model@call)`**
<br>

``` {r linear mixed model SSVEP 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model
model2test = lmer_model_fit

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("SSVEP modulation") +
  ggtitle("modelled SSVEP modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0.22, -0.22, 0.22, -0.22),
    #nudge_y = c(26.7,  26.7,26.7,  26.7),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))



```

### linear mixed models visual alpha II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **visual alpha ~ Validity * Stimulus + ( 1 | subjects)**


```{r linear mixed model visual alpha 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
 filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  # filter(time == "pre_to_post", signal == "visualAlpha")
  filter(time == "[-1000 0]ms", signal == "visualAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("visual Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```
2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model visual alpha 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("visual alpha modulation") +
  ggtitle("modelled visual alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0.22, -0.22, 0.22, -0.22),
    # nudge_y = c(26.7,  26.7,26.7,  26.7),
            color   = "black")+
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

### linear mixed models motor alpha II
<br>

1.  **estimating model**
<br>

linear mixed model of standard effects based on single trial data

testing **motor alpha ~ Validity * Stimulus + ( 1 | subjects)**


```{r linear mixed model motor alpha 02 - estimation, echo=FALSE, message=FALSE}
lmer_model_data <- DATA.In_wide %>%
 filter(post_hit == "hit") %>%
  dplyr::select(subject, trialnumber, cue_validity_label, post_event_pos_label, signal, time, amplitude, pos_rel_target)%>%
  pivot_wider(names_from = "time", values_from = amplitude) %>%
  # mutate(pre_to_post = ((`[0 1000]ms`/`[-1000 0]ms`)-1)*100)%>%
  mutate(pre_to_post = `[0 1000]ms`-`[-1000 0]ms`)%>%
  pivot_longer(`[-1000 0]ms`:pre_to_post, names_to = "time", values_to = "amplitude") %>%
  # filter(time == "pre_to_post", signal == "motorAlpha")
  filter(time == "[-1000 0]ms", signal == "motorAlpha")


lmer_model_fit <-lmerTest::lmer(amplitude ~ cue_validity_label * pos_rel_target + ( 1 | subject),
                  data=lmer_model_data, REML=TRUE)
# model_estimation <- lmerTest::step(lmer_model_fit, ddf="Kenward-Roger", reduce.random=FALSE)
model_estimation <- lmerTest::step(lmer_model_fit, ddf="Satterthwaite", reduce.random=FALSE)
best_model <- get_model(model_estimation)

# print model estimation
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("motor Alpha | fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```
2.  model description of best model
    + Best model is `r toString(best_model@call)`  
<br>

``` {r linear mixed model motor alpha 02 - display, fig.height=6, fig.width=10, warning=FALSE}

model2test = best_model

## validity
anova_lsmeans_c <- lsmeans(model2test, c("cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label , y = lsmean, color = cue_validity_label , fill = cue_validity_label , label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for validity") +
  scale_x_discrete("validity") +
  # ggplot2::labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons).")), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+ 
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")
  
## position
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = pos_rel_target, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.4),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position") +
  scale_x_discrete("position") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0, -0),
    # nudge_y = c(26.7,  26.7),
            color   = "black")+
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")

## Validiaet X Seite
anova_lsmeans_c <- lsmeans(model2test, c("pos_rel_target","cue_validity_label")) 
CLD_obj = cld(anova_lsmeans_c,
          alpha=0.05,
          Letters=letters,      ### Use lower-case letters for .group
          adjust="holm")
CLD_obj$.group=gsub(" ", "", CLD_obj$.group)

ggplot(CLD_obj, aes(x = cue_validity_label, y = lsmean, color = pos_rel_target, fill = pos_rel_target, label = .group)) +
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width=.4, size=.9, position = position_dodge(0.9),color = "black") +
  theme_bw() +
  theme(axis.title = element_text(face = "bold"), axis.text = element_text(face = "bold"),plot.caption = element_text(hjust = 0)) +
  ylab("motor alpha modulation") +
  ggtitle("modelled motor alpha modulation", 
           subtitle="separate for position x validity") +
  scale_x_discrete("validity") +
  # labs(caption  = paste0("\nMeans sharing a letter are ",
  #                        "not significantly different.",
  #                        "(holm corrected comparisons)."), hjust=0.5) +
  geom_text(
    # nudge_x = c(0.22, -0.22, 0.22, -0.22),
    # nudge_y = c(26.7,  26.7,26.7,  26.7),
            color   = "black")+
  scale_fill_brewer(palette = "Dark2")+
  scale_color_brewer(palette = "Dark2")


plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("pos_rel_target","cue_validity_label"))
plot_model(model2test, type = "pred", terms = c("cue_validity_label","pos_rel_target"))

```

