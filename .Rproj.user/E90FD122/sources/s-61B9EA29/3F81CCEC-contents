---
title: "tACS_closedloop_TimeCourseanalysis_visalpha3s"
author: "Christopher Gundlach"
date: "2019-11-22"
output:
  html_document:
    code_folding: hide
    toc: true
    toc_float: true
    toc_depth: 4
    theme: readable ##yeti #united ###spacelab #simplex ###readable #paper ##lumen #cosmo ##journal #flatly
  # tufte::tufte_html: default
  # prettydoc::html_pretty:
  #   theme: architect
  #   highlight: github
  #   #code_folding: hide
---

Modelling of potential stimulation effects of *tACS* applied in *phase*, in *opposite phase*, in *random phase* or *sham* (noise stimulation) (**STIMULATION**) to ongoing alpha oscillations on *alpha power* measured *pre* and *post* (**TIME**) to stimulation derived from channel *POZ*, **POC** and CSP filters maximizing alpha power *post over pre* or *pre over post* (**SIGNAL**)

* modelling regression across time~
* ~~via linear mixed models~~ [*not yet implemented*]


```{r load_package, message = FALSE, warning = FALSE}
library(prettydoc)
library(tufte)
library(lme4)
library(readxl)
library(tidyverse)
library(data.table)
library(tidyverse)
library(afex)
library(broom)
library(apa)
library(kableExtra)
library(lmerTest)
library(pbkrtest)
library(effects)
library(visreg)
library(sjPlot)
library(broom.mixed)
library(pander)
library(mediation)
library(multcompView)
library(multcomp)
library(emmeans)
library(lemon)
library(ggbeeswarm)



# DATAPath = "data/500ms/" 
DATAPath = "data/POC_500ms/"
DATAFILES = sprintf("subj%02.0f.dat",c(1:19))


options(scipen=1, digits=6)
```
<style type="text/css">
.main-container {
  max-width: 1800px !important;
  margin-left: auto;
  margin-right: auto;
}
</style>


## Prepare data  
<br>  

1.  Read in data: 
    + `r sprintf('%s/%s',getwd(),DATAPath)`
    + *subjects, condition, trialcount, time, AP POz, AP CSPpre, AP CSPpost* 
2.  Create new dataset with data averaged across trials
3.  Calculate pre to post modulation in %
<br>  

```{r load_data, fig.show = "hide", warning = FALSE, fig.height=6, fig.width=10}

DATAIn <- read.csv(sprintf("%sR_export_500ms.txt",DATAPath)) %>%
  mutate(subjects = as.factor(subjects), trialcount=as.factor(trialcount))
# DATAIn <- read.csv(sprintf("%sR_export_smoothed_500ms.txt",DATAPath)) %>%
#   mutate(subjects = as.factor(subjects), trialcount=as.factor(trialcount))
# DATAIn <- read.csv(sprintf("%sR_export_smoothed_zscore_500ms.txt",DATAPath)) %>%
#   mutate(subjects = as.factor(subjects), trialcount=as.factor(trialcount))
# DATAIn <- read.csv(sprintf("%sR_export_smoothed_percent_500ms.txt",DATAPath)) %>%
#   mutate(subjects = as.factor(subjects), trialcount=as.factor(trialcount))
# str(DATAIn)

# gather across signals
DATAAll <- DATAIn %>%
  ### gather(signal, amplitude, -subjects, -condition, -trialcount, -time)%>%
  pivot_longer(c(-subjects, -condition, -trialcount, -time),names_to = "signal", values_to = "amplitude") %>%
  pivot_wider(names_from = time,
              values_from = amplitude) %>%
  mutate(`post-pre`=(post/pre)*100-100)%>% # modulation in %
  pivot_longer(c(-subjects, -condition, -trialcount, -signal),names_to = "time", values_to = "amplitude")%>%
  ungroup()%>%
  mutate(signal = as.factor(signal))%>%
  mutate(time = factor(time, levels=c('pre','post','post-pre'), ordered = T))%>%
  mutate(trialcount = as.numeric(trialcount))


# head(DATAAll_avg)
# str(DATAAll_avg)
kable(head(DATAAll),escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("data collapsed across trials")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

```



## Plot data  
<br>  

1.  plotting alpha power timecourses separate for all measures and experimental conditions

```{r plot_data, echo=TRUE, fig.height=8, fig.width=8, warning=FALSE, results = "hide"}

theme_set(theme_bw())
plot_data <- DATAAll%>%
  ungroup()%>%
  filter(time!="post-pre")
  # filter(time=="post" & signal=="POz")


g <-ggplot(plot_data, aes(x = trialcount, y = amplitude, color = condition, group = condition)) +
  stat_summary(fun.data = mean_cl_normal, geom = "ribbon", alpha = 0.2, fill = NA, linetype = "dashed") +
  stat_summary(fun.y = mean, geom = "line", size = 1) +
  facet_wrap(time~signal, scales = "free", nrow = 2)


print(g)

# ggsave(filename = "Plot1_smooth.eps", width = 8, height = 4,
#        plot = print(g))

```



## Actual modelling of alpha power with linear mixed models  
<br>  

**NOT YET IMPLEMENTED**  

**IMPLEMENTATION IN PROGRESS**

1.  Model selection: which models are "superior"?  
<br>  
    1.  Model selection via step function [`lmerTest::step`] with Kenward-Roger or Sattherthwait approximation
        + from most complex model
        + Create linear mixed models: model power values
        + Which parameters are systematically related to changes of alpha power measured for 500 ms at **POz**,**POC**,**CSPpre**,**CSPpost**?
            + (**model**) random slopes for trialcount and random intercepts are modelled
            + TRIALCOUNT X CONDITION X TIME
             

### model_POz

<br>  

```{r linear_mixed_model_model_selection_step_POz, fig.height=6, fig.width=10, warning=FALSE, tidy.opts=list(blank=FALSE, width.cutoff=60), eval=TRUE }

lmer_model_dat_st_POz <- DATAAll %>%
  # filter(signal=="POz" & time=="post") %>%
  # filter(signal=="POz" & time=="pre") %>%
  filter(signal=="POz" & time!="post-pre")%>%
  # filter(signal=="POC" & time!="post-pre")%>%
  ungroup()
  # lmer_model_dat_st$alpha_bin <- as.factor(lmer_model_dat_st$alpha_bin)

# model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount + (trialcount  | subjects),
#                   data=lmer_model_dat_st, REML=TRUE)
model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount * time + (trialcount  | subjects),
                  data=lmer_model_dat_st_POz, REML=TRUE)
model_estimation <- lmerTest::step(model_POz,ddf="Satterthwaite",reduce.random=FALSE)
best_model <- get_model(model_estimation)

model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",
                                                                 font_size = 8),position = "left")

```

check of statistic models for alpha amplitude [*development across trials*]
best model is **`r toString(best_model@call)`**  

```{r check model POz, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE}

# model2test <- best_model
model2test <- model_POz
# plot_model(model2test, show.values = TRUE)
# coef(model2test)

# plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("condition"))
plot_model(model2test, type = "pred", terms = c("trialcount"))
plot_model(model2test, type = "pred", terms = c("time"))
plot_model(model2test, type = "pred", terms = c("time","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition","time"))
# plot_model(model2test, type = "pred", terms = c("condition","trialcount"))
plot_model(model2test, type = "int", mdrt.values = "minmax",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("trialcount","time","condition"), mdrt.values = "minmax",show.values = TRUE)




lmer_model_dat_st_POz$pred <- predict(model2test,re.form=NA)  ## population level
lmer_model_dat_st_POz$pred1 <- predict(model2test) ## individual level
ggplot(lmer_model_dat_st_POz,aes(x=trialcount,y=amplitude))+
  # geom_point()+
  geom_line(aes(group=subjects), alpha=0.2)+
  facet_grid(time~condition) +
  geom_line(colour="black",aes(y=pred1,group=subjects)) +
  geom_line(colour="red",aes(y=pred,group=subjects),size=1)

```

### model_POC
        
<br>  

```{r linear_mixed_model_model_selection_step_POC, fig.height=6, fig.width=10, warning=FALSE, tidy.opts=list(blank=FALSE, width.cutoff=60), eval=TRUE }

lmer_model_dat_st_POC <- DATAAll %>%
  # filter(signal=="POz" & time=="post") %>%
  # filter(signal=="POz" & time=="pre") %>%
  # filter(signal=="POz" & time!="post-pre")%>%
  filter(signal=="POC" & time!="post-pre")%>%
  ungroup()
  # lmer_model_dat_st$alpha_bin <- as.factor(lmer_model_dat_st$alpha_bin)

# model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount + (trialcount  | subjects),
#                   data=lmer_model_dat_st, REML=TRUE)
model_POC <-lmerTest::lmer(amplitude ~ condition * trialcount * time + (trialcount  | subjects),
                  data=lmer_model_dat_st_POC, REML=TRUE)
model_estimation <- lmerTest::step(model_POC,ddf="Satterthwaite",reduce.random=FALSE)
best_model <- get_model(model_estimation)

model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",
                                                                 font_size = 8),position = "left")

```

check of statistic models for alpha amplitude [*development across trials*]
best model is **`r toString(best_model@call)`**  

```{r check model POC, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE}

# model2test <- best_model
model2test <- model_POC
# plot_model(model2test, show.values = TRUE)
# coef(model2test)

# plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("condition"))
plot_model(model2test, type = "pred", terms = c("trialcount"))
plot_model(model2test, type = "pred", terms = c("time"))
plot_model(model2test, type = "pred", terms = c("time","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition","time"))
# plot_model(model2test, type = "pred", terms = c("condition","trialcount"))
plot_model(model2test, type = "int", mdrt.values = "minmax",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("trialcount","time","condition"), mdrt.values = "minmax",show.values = TRUE)




lmer_model_dat_st_POC$pred <- predict(model2test,re.form=NA)  ## population level
lmer_model_dat_st_POC$pred1 <- predict(model2test) ## individual level
ggplot(lmer_model_dat_st_POz,aes(x=trialcount,y=amplitude))+
  # geom_point()+
  geom_line(aes(group=subjects), alpha=0.2)+
  facet_grid(time~condition) +
  geom_line(colour="black",aes(y=pred1,group=subjects)) +
  geom_line(colour="red",aes(y=pred,group=subjects),size=1)

```

### model_CSPpre
        
<br>  

```{r linear_mixed_model_model_selection_step_CSppre, fig.height=6, fig.width=10, warning=FALSE, tidy.opts=list(blank=FALSE, width.cutoff=60), eval=TRUE }

lmer_model_dat_st_CSPpre <- DATAAll %>%
  # filter(signal=="POz" & time=="post") %>%
  # filter(signal=="POz" & time=="pre") %>%
  # filter(signal=="POz" & time!="post-pre")%>%
  filter(signal=="CSPpre" & time!="post-pre")%>%
  ungroup()
  # lmer_model_dat_st$alpha_bin <- as.factor(lmer_model_dat_st$alpha_bin)

# model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount + (trialcount  | subjects),
#                   data=lmer_model_dat_st, REML=TRUE)
model_CSPpre <-lmerTest::lmer(amplitude ~ condition * trialcount * time + (trialcount  | subjects),
                  data=lmer_model_dat_st_CSPpre, REML=TRUE)
model_estimation <- lmerTest::step(model_CSPpre,ddf="Satterthwaite",reduce.random=FALSE)
best_model <- get_model(model_estimation)

model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",
                                                                 font_size = 8),position = "left")

```

check of statistic models for alpha amplitude [*development across trials*]
best model is **`r toString(best_model@call)`**  

```{r check model CSPpre, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE}

# model2test <- best_model
model2test <- model_CSPpre
# plot_model(model2test, show.values = TRUE)
# coef(model2test)

# plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("condition"))
plot_model(model2test, type = "pred", terms = c("trialcount"))
plot_model(model2test, type = "pred", terms = c("time"))
plot_model(model2test, type = "pred", terms = c("time","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition","time"))
# plot_model(model2test, type = "pred", terms = c("condition","trialcount"))
plot_model(model2test, type = "int", mdrt.values = "minmax",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("trialcount","time","condition"), mdrt.values = "minmax",show.values = TRUE)




lmer_model_dat_st_POC$pred <- predict(model2test,re.form=NA)  ## population level
lmer_model_dat_st_POC$pred1 <- predict(model2test) ## individual level
ggplot(lmer_model_dat_st_POz,aes(x=trialcount,y=amplitude))+
  # geom_point()+
  geom_line(aes(group=subjects), alpha=0.2)+
  facet_grid(time~condition) +
  geom_line(colour="black",aes(y=pred1,group=subjects)) +
  geom_line(colour="red",aes(y=pred,group=subjects),size=1)

```
 
### model_CSPpost
        
<br>  

```{r linear_mixed_model_model_selection_step_CSPpost, fig.height=6, fig.width=10, warning=FALSE, tidy.opts=list(blank=FALSE, width.cutoff=60), eval=TRUE }

lmer_model_dat_st_CSPpost <- DATAAll %>%
  # filter(signal=="POz" & time=="post") %>%
  # filter(signal=="POz" & time=="pre") %>%
  # filter(signal=="POz" & time!="post-pre")%>%
  filter(signal=="CSPpost" & time!="post-pre")%>%
  ungroup()
  # lmer_model_dat_st$alpha_bin <- as.factor(lmer_model_dat_st$alpha_bin)

# model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount + (trialcount  | subjects),
#                   data=lmer_model_dat_st, REML=TRUE)
model_CSPpost <-lmerTest::lmer(amplitude ~ condition * trialcount * time + (trialcount  | subjects),
                  data=lmer_model_dat_st_CSPpost, REML=TRUE)
model_estimation <- lmerTest::step(model_CSPpost,ddf="Satterthwaite",reduce.random=FALSE)
best_model <- get_model(model_estimation)

model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",
                                                                 font_size = 8),position = "left")

```

check of statistic models for alpha amplitude [*development across trials*]
best model is **`r toString(best_model@call)`**  

```{r check model CSPpost, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE}

# model2test <- best_model
model2test <- model_CSPpost
# plot_model(model2test, show.values = TRUE)
# coef(model2test)

# plot_model(model2test, bpe.style = "dot",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("condition"))
plot_model(model2test, type = "pred", terms = c("trialcount"))
plot_model(model2test, type = "pred", terms = c("time"))
plot_model(model2test, type = "pred", terms = c("time","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition"))
plot_model(model2test, type = "pred", terms = c("trialcount","condition","time"))
# plot_model(model2test, type = "pred", terms = c("condition","trialcount"))
plot_model(model2test, type = "int", mdrt.values = "minmax",show.values = TRUE)
plot_model(model2test, type = "pred", terms = c("trialcount","time","condition"), mdrt.values = "minmax",show.values = TRUE)




lmer_model_dat_st_POC$pred <- predict(model2test,re.form=NA)  ## population level
lmer_model_dat_st_POC$pred1 <- predict(model2test) ## individual level
ggplot(lmer_model_dat_st_POz,aes(x=trialcount,y=amplitude))+
  # geom_point()+
  geom_line(aes(group=subjects), alpha=0.2)+
  facet_grid(time~condition) +
  geom_line(colour="black",aes(y=pred1,group=subjects)) +
  geom_line(colour="red",aes(y=pred,group=subjects),size=1)

```