---
title: "tACS_closedloop_analysis_visalpha3s"
author: "Christopher Gundlach"
date: "2019-11-22"
output:
  html_document:
    code_folding: hide
    toc: true
    toc_float: true
    toc_depth: 4
    theme: readable ##yeti #united ###spacelab #simplex ###readable #paper ##lumen #cosmo ##journal #flatly
  # tufte::tufte_html: default
  # prettydoc::html_pretty:
  #   theme: architect
  #   highlight: github
  #   #code_folding: hide
---

Modelling of potential stimulation effects of *tACS* applied in *phase*, in *opposite phase*, in *random phase* or *sham* (noise stimulation) (**STIMULATION**) to ongoing alpha oscillations on *alpha power* measured *pre* and *post* (**TIME**) to stimulation derived from channel *POZ* and CSP filters maximizing alpha power *post over pre* or *pre over post* (**SIGNAL**)

* via standard ANOVA models~RM~
* ~~via linear mixed models~~ [*not yet implemented*]


```{r load_package, message = FALSE, warning = FALSE}
library(prettydoc)
library(tufte)
library(lme4)
library(readxl)
library(tidyverse)
library(data.table)
library(tidyverse)
library(afex)
library(broom)
library(apa)
library(kableExtra)
library(lmerTest)
library(pbkrtest)
library(effects)
library(visreg)
library(sjPlot)
library(broom.mixed)
library(pander)
library(mediation)
library(multcompView)
library(multcomp)
library(emmeans)
library(lemon)
library(ggbeeswarm)



DATAPath = "data/500ms/" 
DATAFILES = sprintf("subj%02.0f.dat",c(1:19))


options(scipen=1, digits=6)
```
<style type="text/css">
.main-container {
  max-width: 1800px !important;
  margin-left: auto;
  margin-right: auto;
}
</style>


## Prepare data  
<br>  

1.  Read in data: 
    + `r sprintf('%s/%s',getwd(),DATAPath)`
    + *subjects, condition, trialcount, time, AP POz, AP CSPpre, AP CSPpost* 
2.  Create new dataset with data averaged across trials
3.  Calculate pre to post modulation in %
<br>  

```{r load_data, fig.show = "hide", warning = FALSE, fig.height=6, fig.width=10}

DATAIn <- read.csv(sprintf("%sR_export_500ms.txt",DATAPath)) %>%
  mutate(subjects = as.factor(subjects), trialcount=as.factor(trialcount))
# str(DATAIn)

# gather across signals
DATAAll <- DATAIn %>%
  ### gather(signal, amplitude, -subjects, -condition, -trialcount, -time)%>%
  pivot_longer(c(-subjects, -condition, -trialcount, -time),names_to = "signal", values_to = "amplitude")


# average across trials and blocks 
DATAAll_avg <- DATAAll %>%
  group_by(subjects, condition, time, signal) %>%
  dplyr::summarise(amplitude = mean(amplitude)) %>%
  ### spread(amplitude, time)%>%
  pivot_wider(names_from = time,
              values_from = amplitude) %>%
  mutate(`post-pre`=(post/pre)*100-100)%>% # modulation in %
  # mutate(`post-pre`=(post-pre))%>% # modulation in %
  pivot_longer(c(-subjects, -condition, -signal),names_to = "time", values_to = "amplitude")%>%
  ungroup()%>%
  mutate(signal = as.factor(signal))%>%
  mutate(time = factor(time, levels=c('pre','post','post-pre'), ordered = T))
# str(DATAAll_avg)
DATAAll_avg$time =  factor(DATAAll_avg$time, levels=c('pre','post','post-pre'), ordered = T)

  
# head(DATAAll_avg)
# str(DATAAll_avg)
kable(head(DATAAll_avg),escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("data collapsed across trials")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))



```



## Plot data  
<br>  

1.  plotting alpha power averaged across trials separate for all measures and experimental conditions

```{r plot_data, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE, results = "hide"}

theme_set(theme_bw())
plot_data <- DATAAll_avg%>%
  ungroup()%>%
  filter(time!="post-pre")

g <-ggplot(plot_data, aes(x = interaction( time, condition), y = amplitude, fill = time)) +
  scale_fill_brewer(palette = "Dark2")+
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_line(aes(group = interaction(subjects,condition)),alpha = 0.6, colour = "grey60") +
  geom_point(size = 2.5, colour = "black",alpha = 0.3) +
  # geom_point(size = 1.5, aes(colour  = post_cue_attention)) +
  #geom_point(shape = 21,aes(fill  = post_cue_task, size = 0.5, stroke = 0.5)) +
  scale_x_discrete("stimulation condition", labels=c("anti","", "in","", "noise", "", "random","")) +
  stat_summary(fun.data = mean_se, geom = "errorbar",position=position_dodge(width=0.95),width=.4, size=.9) +
  facet_grid( ~ signal) +
  labs(title=sprintf("alpha power | N = %1.0f",length(unique(plot_data$subjects))), 
       subtitle="separet for signals and conditions") +
  theme(plot.title = element_text(hjust = 0.5)) +
  ylab(expression(paste("alpha power")))


print(g)

ggsave(filename = "Plot1b.eps", width = 8, height = 4,
       plot = print(g))

```


<br>  

2.  plotting pre-to-post modulation of alpha power in % averaged across trials separate for all measures and experimental conditions  

```{r plot_data2, echo=TRUE, fig.height=4, fig.width=8, warning=FALSE, results = "hide"}

theme_set(theme_bw())

plot_data <- DATAAll_avg%>%
  ungroup()%>%
  filter(time=="post-pre")

g <-ggplot(plot_data, aes(x = condition, y = amplitude, fill = condition)) +
  scale_fill_brewer(palette = "Set1",name = "stimulation condition",labels = c("anti phase","in phase","noise stim","random phase"))+
  stat_summary(fun.data = mean_se, geom = "bar", position = "dodge") +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_point(size = 2.5, colour = "black",alpha = 0.3) +
  stat_summary(fun.data = mean_se, geom = "errorbar",position=position_dodge(width=0.95),width=.4, size=.9,colour = "grey40") +
  scale_x_discrete("stimulation condition", labels=c("","", "", "")) +
  facet_grid(.~signal) +
  labs(title=sprintf("alpha power | modulation post vs pre | N = %1.0f",length(unique(plot_data$subjects))), 
       subtitle="separate for signals and conditions | same scale") +
  theme(plot.title = element_text(hjust = 0.5)) +
  # ylab(expression(paste("pre to post difference")))
  ylab(expression(paste("pre to post modulation in %")))


g2 <- ggplot(plot_data, aes(x = condition, y = amplitude, fill = condition)) +
  # stat_summary(fun.data = mean_se, geom = "bar", position = "dodge",width = 0.5) +
  geom_hline(yintercept=0, show.legend = FALSE) +
  geom_violin(alpha = 0.2,colour = 'white')+
  geom_beeswarm(aes(fill = condition, shape = signal, group = condition), color = 'black',cex=1.5, size = 3)+
    # geom_dotplot(binaxis='y', stackdir='center',stackratio=0.7, dotsize=18, binwidth = 0.2,position = position_jitter(w = 0.05, h = 0)) +
   # geom_point(shape = 21,aes(fill  = post_cue_task, size = 0.5, stroke = 0.5)) +
  # scale_x_discrete("conditions", , labels=c("attend cross","attend ring")) +
  # stat_summary(fun.data = mean_se, geom = "errorbar", position=position_dodge(width=0.95),width=.3, size=.9) +
  stat_summary(fun.y=mean, aes(ymin=..y.., ymax=..y.., color =condition), geom='errorbar', width=0.9, size=1.25) + 
  scale_x_discrete("stimulation condition", labels=c("","", "", "")) +
  scale_shape_manual(values = c(23, 21, 24, 25)) +
  # scale_fill_manual("post-cue attention", labels = c("contralateral to attended","contralateral to unattended"),
  # values = c("grey40","grey80")) +
  # scale_color_manual("post-cue attention", labels = c("contralateral to attended","contralateral to unattended"),
  # values = c("grey40","grey80")) +
  facet_grid(.~signal)+
  # ggtitle("post_cue amplitude modulation")+
  theme(plot.title = element_text(hjust = 0.5),legend.position="bottom") +
  ylab(expression(paste("pre to post amplitude modulation in %")))







print(g2)

# ggsave(filename = "Plot2.eps", width = 3.5, height = 8,
#        plot = print(g))
ggsave(filename = "Plot2b.eps", width = 8, height = 4,
       plot = print(g2))



```




## Model data  
<br>  

### ANOVA~(RM)~ for each measure
1.  amplitude for measures:
    + alpha_power_CSPpost
    + alpha_power_CSPpre
    + alpha_power_POz
    + alpha_power_POC
2.  factors:
    + **condition** [in phase, opposite phase, noise, random phase]
    + **time** [pre-stimulation, post-stimulation]


```{r ANOVA_V1, fig.show = "hide", warning = FALSE, fig.height=4, fig.width=10}
StatsOut <- DATAAll_avg %>%
  ungroup()%>%
  filter(time != "post-pre") %>%
  group_by(signal) %>%
  nest() %>%
  mutate(stats= map(data, ~broom::tidy(
    anova(aov_ez(id="subjects", dv = "amplitude", data = ., within = c("time","condition")))
  ))) %>%
  dplyr::select(-data) %>%
  unnest()

StatsOut %>%
  # mutate(p.value = p.adjust(p.value, method="holm"))%>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "center")
  ) %>%
  mutate(term = cell_spec(term, align = "center")) %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("repeated measures ANOVA | dv = amplitude of alpha oscillations")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8)) %>%
  row_spec(c(1:3, 7:9), background = "white")%>%
  row_spec(c(4:6), background = "#F2F2F2")

```

### posthoc comparisons for POz data from different time points and different conditions

```{r Posthoc ANOVA_V1, fig.show = "hide", warning = FALSE, fig.height=4, fig.width=10}
DATAAll_avg %>%
  ungroup()%>%
  filter(time != "post-pre")%>%
  filter(signal== "POz")%>%
  aov_ez(id="subjects", dv = "amplitude", data = ., within = c("time","condition"),include_aov = TRUE)%>%
  .$aov%>%
  emmeans(.,  c("time","condition"), contr = "pairwise")%>%
  .$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated means | ANOVA: TIME X CONDITION | dv = amplitude | POz ")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
  

DATAAll_avg %>%
  ungroup()%>%
  filter(time != "post-pre")%>%
  filter(signal== "POz")%>%
  aov_ez(id="subjects", dv = "amplitude", data = ., within = c("time","condition"),include_aov = TRUE)%>%
  .$aov%>%
  emmeans(.,  c("time","condition"), contr = "pairwise", adjust="none")%>%
  .$contrasts%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("uncorrected pairwise contrasts estimated means | ANOVA: TIME X CONDITION | dv = amplitude | POz ")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
```



<br>  

### ANOVA~(RM)~ for each measure | reduced + post hoc t-tests
1.  pre to post amplitude modulation in % for measures:
    + alpha_power_CSPpost
    + alpha_power_CSPpre
    + alpha_power_POz
    + alpha_power_POC
    2.  factors:
    + **condition** [in phase, opposite phase, noise, random phase]
3.  t-tests
    + testing amplitude difference for all combinations of all conditons against 0

```{r ANOVA_V2, fig.show = "hide", warning = FALSE, fig.height=6, fig.width=10}
StatsOut <- DATAAll_avg %>%
  ungroup()%>%
  filter(time == "post-pre") %>%
  group_by(signal) %>%
  nest() %>%
  mutate(stats= map(data, ~broom::tidy(
    anova(aov_ez(id="subjects", dv = "amplitude", data = ., within = c("condition")))
  ))) %>%
  dplyr::select(-data) %>%
  unnest()

StatsOut %>%
  # mutate(p.value = p.adjust(p.value, method="holm"))%>%
  mutate(
    p.value = cell_spec(ifelse(round(p.value,4)<.001,"< .001",round(p.value,4)), 
                        color = ifelse(is.nan(p.value),"blue", ifelse(p.value < .05, "green", "red")),
                        bold = ifelse(is.nan(p.value),F, ifelse(p.value < .05, T,F)),
                        align = "center")
  ) %>%
  mutate(term = cell_spec(term, align = "center")) %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), 
        caption = c("repeated measures ANOVA | dv = pre to post amplitude modulation of alpha power in %")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))

```

### posthoc comparisons for POz pre-to-post-stimulation data from different conditions

```{r Posthoc ANOVA_V2, fig.show = "hide", warning = FALSE, fig.height=4, fig.width=10}

DATAAll_avg %>%
  ungroup()%>%
  filter(time == "post-pre")%>%
  filter(signal== "POz")%>%
  aov_ez(id="subjects", dv = "amplitude", data = ., within = c("condition"),include_aov = TRUE)%>%
  .$aov%>%
  emmeans(.,  c("condition"), contr = "pairwise")%>%
  .$emmeans %>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("estimated means | ANOVA: CONDITION | dv = pre to post modulatin | POz")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))
  

DATAAll_avg %>%
  ungroup()%>%
  filter(time == "post-pre")%>%
  filter(signal== "POz")%>%
  aov_ez(id="subjects", dv = "amplitude", data = ., within = c("condition"),include_aov = TRUE)%>%
  .$aov%>%
  emmeans(.,  c("condition"), contr = "pairwise", adjust="none")%>%
  .$contrasts%>%
  kable(escape = F, digits = c(3,3,3,3,3,3,3,3,3), caption = c("uncorrected pairwise contrasts estimated means | ANOVA: CONDITION | dv = pre to post modulatin | POz")) %>%
  kable_styling("striped", full_width = T, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8))



```


### Actual modelling of alpha power with linear mixed models  
<br>  

**NOT YET IMPLEMENTED**  

**IMPLEMENTATION IN PROGRESS**

1.  Model selection: which models are "superior"?  
<br>  
    1.  Model selection via step function [`lmerTest::step`] with Kenward-Roger approximation
        + from most complex model
        + Create linear mixed models: model power values
        + Which parameters are systematically related to changes of alpha power?
            + (**model_postAtt_T_PreCueTask_T_alpha**) with random slopes for pre_cue_task X post_cue_attention and random intercepts are modelled
            + post-cue SSVEP amplitude modulation is related intersubject differences
            + post-cue SSVEP amplitude modulation is related to post-cue attention condition
            + post-cue SSVEP amplitude modulation is related to pre-cue task condition
            + post-cue SSVEP amplitude modulation is related to post-cue alpha amplitude modulation (dependent on relation of ipsi alpha to contra alpha represented in alpha bins)
             
<br>  

```{r linear_mixed_model_model_selection_step, fig.height=6, fig.width=10, warning=FALSE, tidy.opts=list(blank=FALSE, width.cutoff=60), eval=FALSE }

lmer_model_dat_st <- DATAAll %>%
  filter(signal=="POz") %>%
  ungroup()
  # lmer_model_dat_st$alpha_bin <- as.factor(lmer_model_dat_st$alpha_bin)

model_POz <-lmerTest::lmer(amplitude ~ condition * trialcount * time + (condition * time  | subjects),
                  data=lmer_model_dat_st, REML=TRUE)
model_estimation <- lmerTest::step(model_POz,ddf="Satterthwaite",reduce.random=FALSE)
best_model <- get_model(model_estimation)
# print model estimation
# model_estimation$random %>%
#   kable(escape = F, digits = c(3,3,3,3), caption = c("random effects | stepwise elimintion")) %>%
#   kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
model_estimation$fixed %>%
  mutate(
    `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
                        color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
                        bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
                        align = "center")) %>%
  mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
  dplyr::select(colnames(.)[c(8,1:7)]) %>%
  kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
  kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",
                                                                 font_size = 8),position = "left")





model_data <- DATAAll %>%
  ungroup()%>%
  filter(signal=="alpha_power_CSPpost")%>%
  spread(time, amplitude)%>%
  mutate(`post-pre`=post-pre)%>%
  gather(time, amplitude, -subjects, -trials, -block, -eye_state, -stimulation, -phase_prediction_accuracy, -signal)%>%
  mutate(stimulation=as.factor(stimulation))

# create model
# model_singletrial <-lmerTest::lmer(amplitude ~ eye_state * stimulation * time +(eye_state * stimulation * time | subjects),
#                             data=model_data, REML=TRUE)

# model_full <-lmerTest::lmer(amplitude ~ eye_state * stimulation * time * phase_prediction_accuracy +
#                               (eye_state * stimulation * time * phase_prediction_accuracy | subjects),
#                             data=model_data, REML=TRUE)





# model_estimation <- lmerTest::step(model_full,ddf="Kenward-Roger",reduce.random=FALSE)
# best_model <- get_model(model_estimation)
# # print model estimation
# # model_estimation$random %>%
# #   kable(escape = F, digits = c(3,3,3,3), caption = c("random effects | stepwise elimintion")) %>%
# #   kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
# model_estimation$fixed %>%
#   mutate(
#     `Pr(>F)` = cell_spec(ifelse(round(`Pr(>F)`,4)<.001,"< .001",round(`Pr(>F)`,4)), 
#                         color = ifelse(is.nan(`Pr(>F)`),"blue", ifelse(`Pr(>F)` < .05, "green", "red")),
#                         bold = ifelse(is.nan(`Pr(>F)`),F, ifelse(`Pr(>F)` < .05, T,F)),
#                         align = "center")) %>%
#   mutate(`eliminated factor` = rownames(model_estimation$fixed)) %>%
#   dplyr::select(colnames(.)[c(8,1:7)]) %>%
#   kable(escape = F, digits = c(3,3,3,3), caption = c("fixed effects | stepwise elimination")) %>%
#   kable_styling("striped", full_width = F, bootstrap_options = c("striped", "hover", "condensed", "responsive",font_size = 8),position = "left")
```